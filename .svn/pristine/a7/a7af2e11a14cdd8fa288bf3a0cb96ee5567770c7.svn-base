
package PanelForm;

import Conexion.ExeSql;
import Dialogos.jdAgregaPersonas;
import Dialogos.jdBuscaIndicadores;
import Dialogos.jdBuscaSii;
import Dialogos.jdBuscaAsignFamiliar;
import Dialogos.jdBuscaBonosyComisiones;
import Dialogos.jdGetSemanas;
import Dialogos.jdGetTexto;
import Formularios.fmMain;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date; 
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.commons.math3.util.Precision;


/**
 *
 * @author David Alcaman / Roberto Lopez
 */
public class pfGastosSueldos extends javax.swing.JPanel {
    
    static public double bmonto  = 0;
    static public double bmonto2  = 0;
    static public int iagno;
    static public int imes;

    public static String getText() {
        
       throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    
    }
    
    public int tCuotas = 0;
    public int cMes = 0;  
    
    Boolean Estado      = true;
    Boolean Iunico      = false;
    Boolean Recalc      = true;
    Boolean Recalc2      = true;
    Boolean tieneIsapre = false;
    Boolean adcIsapre   = true;
    Boolean semana      = false;
    Boolean prestamo    = false;
    
    int EstadoGeneral;
    int nuevo           = 1;
    int eligeAfp        = 0;
    int eligeCotiz      = 0;
    int eligeFonasa     = 5;
    int eligeGratf      = 100;
    int eligeCesan      = 140;
    int eligeImp        = 190;
    int eligeIsapre     = 501;
    int eligeSem        = 8;
    int eligeFam        = 6;
    int eligePres       = 200;
    int umes            = 0;
    int dcant, dcant2   = 0;
    int autom           = 0;
    int rowcount        = 0;
    
    double thaberim      = 0;
    double himponible    = 0;
    double himponibleces = 0;
    double topeimp       = 0;  
    double topeimpces    = 0;  
    double thaber        = 0;
    double dtrib         = 0;
    double ttrib         = 0;
    double tsem_corr     = 0;
    double trenta_var    = 0;
    double tdesc         = 0;
    double fonasadesc    = 0;
    double valordia      = 0;
    double valordia2     = 0;
    double cubreIsapre   = 0;
    
    
    double AFC1,AFC2,AFC3,MUTUAL,SIS = 0;
   
    String elmes         = ""; 
    String uagno         = "";
    String Dv            = "";
    String nombrefirma   = "";
    String tipocontrato  = "";
    String codigoHaber   = "";
    String nombreHaber   = "";
    String valorHaber    = "";
    
    Calendar cal = Calendar.getInstance();
    Calendar cal2 = new GregorianCalendar();
    Calendar cal3 = new GregorianCalendar();
    Calendar cal4 = new GregorianCalendar();
    
    int year  = cal.get(Calendar.YEAR);
    int month = cal.get(Calendar.MONTH)+1;
    Date hoy = new Date();   
    
    String y = Integer.toString(year);
    int m = month;
    
    DecimalFormat formateador = new DecimalFormat("###,###");
    SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
    
    jdBuscaSii impunico;
    
    jdBuscaIndicadores ind;
    jdBuscaAsignFamiliar afamilia;
    jdBuscaIndicadores gratf; 
    jdBuscaIndicadores afp;
    
    public pfGastosSueldos() {          
        
        initComponents();
        
        //imes = month-1;
        
        imes = month;
        iagno = year;
        
        //*****************************************  Centra los encabezados de las tablas ***************************************//
        
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer)GrillaHaberes.getTableHeader().getDefaultRenderer(); 
        renderer.setHorizontalAlignment(JLabel.CENTER); 
       
        DefaultTableCellRenderer renderer2 = (DefaultTableCellRenderer)GrillaDescuentos.getTableHeader().getDefaultRenderer(); 
        renderer2.setHorizontalAlignment(JLabel.CENTER);
        
        //*******************************************************************************************************************************//
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();                            //Alinea la
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);                                         //segunda    
                                                                                                            //columna    
        GrillaHaberes.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);                         //de la Tabla
        GrillaDescuentos.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);                      //a la derecha    
        
        try{
            
            impunico = new jdBuscaSii();
            ind = new jdBuscaIndicadores();
            afamilia = new jdBuscaAsignFamiliar();
            gratf = new jdBuscaIndicadores(); 
            afp = new jdBuscaIndicadores();
        
        }catch (IOException ex) {
            
            Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
        
        }
        
        SetEstados(1);
        
        jButton1.setVisible(false);
        
        lbTramo.setText("D");
        
        btIr.setEnabled(true);
        btModifica.setEnabled(false);
        btConsolidado.setVisible(false);
       
        cbDetalleId.setVisible(false);
        
        lbDepto.setVisible(false);
        lbCargo.setVisible(false);
        lbContra.setVisible(false);
        lbTramo.setVisible(false);
     
        txNombre.setEnabled(false);
        txRut.setEnabled(true);
        txDiasT.setEnabled(false);
        txMutual.setEnabled(false);
        txCesantia.setEnabled(false);
        txSis.setEnabled(false);
        txMonto.setEnabled(false);
        
        txMutual.setEditable(false);
        txCesantia.setEditable(false);
        txSis.setEditable(false);
        
        txDiah.setVisible(false);
        txDiaf.setVisible(false);
        
        txDiah.setText("");
        txDiaf.setText("");
        
        csemana.setVisible(false);
        
        csemana.setText(String.valueOf(tsem_corr));
        
        
         //**************************************************************************************************//
           jdGetSemanas semanas = new jdGetSemanas(null, true);
           semanas.setLocationRelativeTo(null);
           semanas.setTitle("SEMANAS CORRIDAS");
           semanas.setVisible(true);
           
           if (fmMain.cierra){            
               fmMain.cierra = false;
             
              btCancelar.doClick();
              return;
           }
           
           txDiah.setText(semanas.GetDiasTrab());
           txDiaf.setText(semanas.GetDiasFeriados());
           
           
  //*********************************************************************************************************//
           
           ExeSql Sql = new ExeSql();
           ResultSet Rs = null;
         
           double valor = 0;
           String codigo = "";
    
            try {
                Rs = Sql.Select("SELECT * FROM indicadores WHERE codigo NOT IN ('DOL-1','UF-1')");
            
                if(Sql.GetRowCount()>0){
                
                
                    while (Rs.next()){
                    
                        codigo = Rs.getString("codigo");
                        valor = Rs.getDouble("valor");
                    
                        if (codigo.equals("AFC-1")){
                    
                            AFC1 = valor;
                            System.out.println("valor AFC1 : "+AFC1);
                       
                        }
                    
                        if (codigo.equals("AFC-2")){
                    
                            AFC2 = valor;
                            System.out.println("valor AFC2 : "+AFC2);
                    
                        }
                    
                        if (codigo.equals("AFC-3")){
                    
                            AFC3 = valor;
                            System.out.println("valor AFC3 : "+AFC3);
                    
                        }
                   
                        if (codigo.equals("MUTUAL-1")){
                    
                            MUTUAL = valor;
                            System.out.println("valor MUTUAL : "+MUTUAL);
                    
                        }
                    
                        if (codigo.equals("SIS-1")){
                    
                            SIS = valor;
                            System.out.println("valor SIS : "+SIS);
                    
                        }          
                    
                    }
            
                }
            
        } catch (SQLException ex) {
            Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
  //*********************************************************************************************************//    
        
     }

    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnMenu = new javax.swing.JPanel();
        btNuevo = new javax.swing.JButton();
        btGuardar = new javax.swing.JButton();
        btLimpiar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btEditar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        btImprimir = new javax.swing.JButton();
        btConsolidado = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txRut = new javax.swing.JTextField();
        btIr = new javax.swing.JButton();
        txNombre = new javax.swing.JTextField();
        cbAgno = new javax.swing.JComboBox<String>();
        cbMes = new javax.swing.JComboBox<String>();
        lbEstado = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btModifica = new javax.swing.JButton();
        txDiasT = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        lbDepto = new javax.swing.JLabel();
        lbContra = new javax.swing.JLabel();
        lbNcargas = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lbCargo = new javax.swing.JLabel();
        csemana = new javax.swing.JLabel();
        lbTramo = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txTotalTrib = new javax.swing.JTextField();
        txTopeImp = new javax.swing.JTextField();
        txTopeImpCes = new javax.swing.JTextField();
        txDiah = new javax.swing.JTextField();
        txDiaf = new javax.swing.JTextField();
        txLicencia = new javax.swing.JTextField();
        txFeriados = new javax.swing.JTextField();
        txInasistencia = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cbTipo = new javax.swing.JComboBox<String>();
        jLabel3 = new javax.swing.JLabel();
        cbDetalle = new javax.swing.JComboBox<String>();
        jLabel8 = new javax.swing.JLabel();
        txMonto = new javax.swing.JTextField();
        btAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        GrillaHaberes = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        GrillaDescuentos = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txMutual = new javax.swing.JTextField();
        txCesantia = new javax.swing.JTextField();
        txSis = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txTotal = new javax.swing.JTextField();
        cbDetalleId = new javax.swing.JComboBox<String>();
        btEliminaHaber = new javax.swing.JButton();
        btEliminaDescuento = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txTotalDesc = new javax.swing.JTextField();
        txTotalImp = new javax.swing.JTextField();
        txTotalHaber = new javax.swing.JTextField();

        setMaximumSize(new java.awt.Dimension(1070, 660));
        setMinimumSize(new java.awt.Dimension(0, 0));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(1070, 660));

        pnMenu.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btNuevo.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/add16.png"))); // NOI18N
        btNuevo.setText("Nuevo");
        btNuevo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btNuevo.setBorderPainted(false);
        btNuevo.setFocusPainted(false);
        btNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNuevoActionPerformed(evt);
            }
        });

        btGuardar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/save16.png"))); // NOI18N
        btGuardar.setText("Guardar");
        btGuardar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btGuardar.setBorderPainted(false);
        btGuardar.setEnabled(false);
        btGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGuardarActionPerformed(evt);
            }
        });

        btLimpiar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/refresh16.png"))); // NOI18N
        btLimpiar.setText("Limpiar");
        btLimpiar.setToolTipText("");
        btLimpiar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btLimpiar.setBorderPainted(false);
        btLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("LIQUIDACION DE SUELDO");

        btEditar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Pencil16.png"))); // NOI18N
        btEditar.setText("Editar");
        btEditar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btEditar.setBorderPainted(false);
        btEditar.setEnabled(false);
        btEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarActionPerformed(evt);
            }
        });

        btCancelar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Cancel16.png"))); // NOI18N
        btCancelar.setText("Cancelar");
        btCancelar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btCancelar.setBorderPainted(false);
        btCancelar.setEnabled(false);
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        btImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/impresora16.png"))); // NOI18N
        btImprimir.setText("Imprimir");
        btImprimir.setEnabled(false);
        btImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImprimirActionPerformed(evt);
            }
        });

        btConsolidado.setText("CONSOLIDAR");
        btConsolidado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsolidadoActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnMenuLayout = new javax.swing.GroupLayout(pnMenu);
        pnMenu.setLayout(pnMenuLayout);
        pnMenuLayout.setHorizontalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(pnMenuLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(btGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btConsolidado)
                .addGap(40, 40, 40))
        );
        pnMenuLayout.setVerticalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btConsolidado, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGroup(pnMenuLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(37, 37, 37))))
                .addGap(20, 20, 20))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Rut");

        txRut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txRutActionPerformed(evt);
            }
        });
        txRut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txRutKeyPressed(evt);
            }
        });

        btIr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/search16.png"))); // NOI18N
        btIr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIrActionPerformed(evt);
            }
        });

        txNombre.setEditable(false);
        txNombre.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txNombre.setDoubleBuffered(true);
        txNombre.setEnabled(false);

        cbAgno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AÑO", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028" }));
        cbAgno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAgnoActionPerformed(evt);
            }
        });

        cbMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MES", "ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE" }));
        cbMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMesActionPerformed(evt);
            }
        });

        lbEstado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbEstado.setForeground(new java.awt.Color(51, 102, 0));
        lbEstado.setText("                ");

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btModifica.setText("Modificar");
        btModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModificaActionPerformed(evt);
            }
        });

        txDiasT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txDiasT.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txDiasT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txDiasTActionPerformed(evt);
            }
        });

        jLabel9.setText("Días Trabajados");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btModifica, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 4, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(txDiasT, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txDiasT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(btModifica)
                .addContainerGap())
        );

        lbDepto.setText("lbDepto");
        lbDepto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbContra.setText("lbContra");
        lbContra.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbNcargas.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbNcargas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbNcargas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        lbNcargas.setEnabled(false);

        jLabel14.setText("N° Cargas Familiares ");

        lbCargo.setText("lbCargo");
        lbCargo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        csemana.setText("csemana");
        csemana.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbTramo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTramo.setText("D");
        lbTramo.setToolTipText("");
        lbTramo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel15.setText("Tope Imponible                ");

        jLabel16.setText("Tope Imponible Cesantía  ");

        jLabel17.setText("Total Tributable               ");

        txTotalTrib.setBackground(new java.awt.Color(240, 240, 240));
        txTotalTrib.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txTotalTrib.setToolTipText("");
        txTotalTrib.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txTotalTrib.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txTotalTrib.setDragEnabled(true);
        txTotalTrib.setEnabled(false);

        txTopeImp.setBackground(new java.awt.Color(240, 240, 240));
        txTopeImp.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txTopeImp.setToolTipText("");
        txTopeImp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txTopeImp.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txTopeImp.setEnabled(false);

        txTopeImpCes.setBackground(new java.awt.Color(240, 240, 240));
        txTopeImpCes.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txTopeImpCes.setToolTipText("");
        txTopeImpCes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txTopeImpCes.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txTopeImpCes.setEnabled(false);

        txDiaf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txDiafActionPerformed(evt);
            }
        });

        txLicencia.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txLicencia.setText("0");
        txLicencia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txLicencia.setEnabled(false);
        txLicencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txLicenciaActionPerformed(evt);
            }
        });

        txFeriados.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txFeriados.setText("0");
        txFeriados.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txFeriados.setEnabled(false);

        txInasistencia.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txInasistencia.setText("0");
        txInasistencia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txInasistencia.setEnabled(false);
        txInasistencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txInasistenciaActionPerformed(evt);
            }
        });

        jLabel18.setText("Días Feriados ");

        jLabel19.setText("Días de Licencia Médica ");

        jLabel20.setText("Días de Inasistencia ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txRut, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(btIr, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbNcargas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txDiah, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(csemana, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txDiaf, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDepto, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbTramo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txTotalTrib, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txTopeImp, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txTopeImpCes, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(cbAgno, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(cbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbEstado))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(txInasistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(4, 4, 4)
                                    .addComponent(txFeriados, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(4, 4, 4)
                                    .addComponent(txLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(76, 76, 76)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lbCargo)
                        .addGap(26, 26, 26))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbContra, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btIr, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(txRut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbEstado)
                            .addComponent(cbAgno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lbNcargas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbTramo)
                                .addComponent(txTopeImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txTopeImpCes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txTotalTrib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txInasistencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(csemana)
                                    .addComponent(lbDepto))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txDiah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txDiaf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txFeriados, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(47, 47, 47)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbContra)
                            .addComponent(lbCargo))))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(967, 51));

        cbTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Tipo", "Haberes", "Descuentos" }));
        cbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoActionPerformed(evt);
            }
        });

        jLabel3.setText("Tipo");

        cbDetalle.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Detalle" }));
        cbDetalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDetalleActionPerformed(evt);
            }
        });

        jLabel8.setText("Monto");

        txMonto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txMontoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txMontoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txMontoKeyTyped(evt);
            }
        });

        btAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Agregar.png"))); // NOI18N
        btAgregar.setText("Agregar");
        btAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(cbDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAgregar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GrillaHaberes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "HABERES", "MONTO", "codigo", "bono"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        GrillaHaberes.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(GrillaHaberes);
        if (GrillaHaberes.getColumnModel().getColumnCount() > 0) {
            GrillaHaberes.getColumnModel().getColumn(1).setMinWidth(85);
            GrillaHaberes.getColumnModel().getColumn(1).setPreferredWidth(85);
            GrillaHaberes.getColumnModel().getColumn(1).setMaxWidth(85);
            GrillaHaberes.getColumnModel().getColumn(2).setMinWidth(0);
            GrillaHaberes.getColumnModel().getColumn(2).setPreferredWidth(0);
            GrillaHaberes.getColumnModel().getColumn(2).setMaxWidth(0);
            GrillaHaberes.getColumnModel().getColumn(3).setMinWidth(0);
            GrillaHaberes.getColumnModel().getColumn(3).setPreferredWidth(0);
            GrillaHaberes.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        GrillaDescuentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "DESCUENTOS", "MONTO", "codigo", "porcentaje"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        GrillaDescuentos.setUpdateSelectionOnSort(false);
        jScrollPane2.setViewportView(GrillaDescuentos);
        if (GrillaDescuentos.getColumnModel().getColumnCount() > 0) {
            GrillaDescuentos.getColumnModel().getColumn(1).setMinWidth(85);
            GrillaDescuentos.getColumnModel().getColumn(1).setPreferredWidth(85);
            GrillaDescuentos.getColumnModel().getColumn(1).setMaxWidth(85);
            GrillaDescuentos.getColumnModel().getColumn(2).setMinWidth(0);
            GrillaDescuentos.getColumnModel().getColumn(2).setPreferredWidth(0);
            GrillaDescuentos.getColumnModel().getColumn(2).setMaxWidth(0);
            GrillaDescuentos.getColumnModel().getColumn(3).setMinWidth(0);
            GrillaDescuentos.getColumnModel().getColumn(3).setPreferredWidth(0);
            GrillaDescuentos.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(84, 57, 31));
        jLabel4.setText("SEGURO ACCIDENTE DEL TRABAJO");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(84, 57, 31));
        jLabel5.setText("SEGURO DE CESANTIA");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(84, 57, 31));
        jLabel6.setText("SEGURO DE INVALIDEZ Y SOBREVIVENCIA");

        txMutual.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txMutual.setText("0");
        txMutual.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txMutual.setEnabled(false);

        txCesantia.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txCesantia.setText("0");
        txCesantia.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txCesantia.setEnabled(false);

        txSis.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txSis.setText("0");
        txSis.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txSis.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 102));
        jLabel7.setText("TOTAL A PAGAR");

        txTotal.setEditable(false);
        txTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txTotal.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txTotal.setEnabled(false);
        txTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txTotalActionPerformed(evt);
            }
        });

        cbDetalleId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        cbDetalleId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDetalleIdActionPerformed(evt);
            }
        });

        btEliminaHaber.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Cancel16.png"))); // NOI18N
        btEliminaHaber.setEnabled(false);
        btEliminaHaber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminaHaberActionPerformed(evt);
            }
        });

        btEliminaDescuento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Cancel16.png"))); // NOI18N
        btEliminaDescuento.setEnabled(false);
        btEliminaDescuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminaDescuentoActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 102));
        jLabel10.setText("TOTAL DESCUENTOS");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 102));
        jLabel11.setText("TOTAL IMPONIBLE");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 102));
        jLabel12.setText("TOTAL HABERES");

        txTotalDesc.setBackground(new java.awt.Color(240, 240, 240));
        txTotalDesc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txTotalDesc.setToolTipText("");
        txTotalDesc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txTotalDesc.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txTotalDesc.setEnabled(false);
        txTotalDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txTotalDescActionPerformed(evt);
            }
        });

        txTotalImp.setBackground(new java.awt.Color(240, 240, 240));
        txTotalImp.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txTotalImp.setToolTipText("");
        txTotalImp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txTotalImp.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txTotalImp.setEnabled(false);

        txTotalHaber.setBackground(new java.awt.Color(240, 240, 240));
        txTotalHaber.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txTotalHaber.setToolTipText("");
        txTotalHaber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txTotalHaber.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txTotalHaber.setEnabled(false);
        txTotalHaber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txTotalHaberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btEliminaHaber, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txSis))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txCesantia)
                                            .addComponent(txMutual, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(cbDetalleId, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btEliminaDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel12))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txTotalHaber, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txTotalImp, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txTotalDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(12, 12, 12))
                            .addComponent(jScrollPane2))))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btEliminaHaber)
                            .addComponent(btEliminaDescuento)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(txCesantia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(txMutual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(txSis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(cbDetalleId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txTotalHaber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txTotalImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txTotalDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SetEstados(int estado){
        /*-- Al Inicio, Nuevo == 0 (nuevo registro), Botones Nuevo, Cancelar, Ir--*/
        if(estado==1){
           
            btGuardar.setEnabled(false);
            btCancelar.setEnabled(false);
            btEditar.setEnabled(false);
            btLimpiar.setEnabled(true);
            btNuevo.setEnabled(true);
            btModifica.setEnabled(false);
            
            Limpiar();
            Habilitar(false);
            Editar(false);
            
            txDiasT.setEnabled(false);
            
            EstadoGeneral=1;
        }
        /*-- Nuevo == 0 (nuevo registro), boton Limpiar --*/
        else if(estado==2){
            
            btGuardar.setEnabled(true);
            btCancelar.setEnabled(true);
            btLimpiar.setEnabled(false);
            btNuevo.setEnabled(false);
            btEditar.setEnabled(false);
            
            Habilitar(true);
            Editar(true);
            EstadoGeneral = 2;
        }
      /*-- Nuevo == 1 (registro existente),  Botones Ir, Cancelar, Guardar --*/
        else if(estado==3){
            
            btGuardar.setEnabled(false);
            btCancelar.setEnabled(false);
            btLimpiar.setEnabled(true);
            btNuevo.setEnabled(true);
            btEditar.setEnabled(true);
            
            Habilitar(true);
            Editar(false);   
           
            EstadoGeneral = 3;  
        }
        /*-- Boton Editar --*/
        else if(estado==4){                
            
            btGuardar.setEnabled(true);
            btCancelar.setEnabled(true);
            btLimpiar.setEnabled(false);
            btNuevo.setEnabled(false);
            btEditar.setEnabled(false);
            btAgregar.setEnabled(true);
            btEliminaDescuento.setEnabled(true);
            btEliminaHaber.setEnabled(true);
            btModifica.setEnabled(true);    
           
            cbDetalle.setEnabled(true);
            cbTipo.setEnabled(true);
            cbAgno.setEnabled(true);
            cbMes.setEnabled(true);
        
            GrillaHaberes.setEnabled(true);
            GrillaDescuentos.setEnabled(true);
        
            txRut.setEnabled(true);
            txMonto.setEnabled(true);
            txDiasT.setEnabled(true);
            
            EstadoGeneral=4;
            
            Editar(true);
            
        }
        
    }
      
    private void Limpiar(){
        
        txRut.setText("");
        txNombre.setText("");
        txMutual.setText("");
        txCesantia.setText("");
        txSis.setText("");
        txFeriados.setText("");
        txLicencia.setText("");
        txInasistencia.setText("");
        
        
        txMonto.setText("");
        txTotalHaber.setText("");
        txTotalImp.setText("");
        txTopeImp.setText("");
        txTopeImpCes.setText("");
        txTotalTrib.setText("");
        txTotalDesc.setText("");
        txTotal.setText("");
        
        semana = false;  
        
        cbAgno.setSelectedIndex(0);
        cbMes.setSelectedIndex(0);
        cbTipo.setSelectedIndex(0);
        cbDetalle.setSelectedIndex(0);
        cbDetalleId.setSelectedIndex(0);
        fmMain.LimpiaGrilla((DefaultTableModel) GrillaHaberes.getModel());
        fmMain.LimpiaGrilla((DefaultTableModel) GrillaDescuentos.getModel());
    }
    
    private void Editar(boolean Estado){
//        
//        cbTipo.setEditable(Estado);
//        cbDetalle.setEditable(Estado);
        txNombre.setEditable(Estado);
       
    }
    
    private void Habilitar(boolean Estado){
        
        btAgregar.setEnabled(Estado);
        btEliminaDescuento.setEnabled(Estado);
        btEliminaHaber.setEnabled(Estado);
        btIr.setEnabled(Estado);
        
        cbDetalle.setEnabled(Estado);
        cbTipo.setEnabled(Estado);
        cbAgno.setEnabled(Estado);
        cbMes.setEnabled(Estado);
        
        GrillaHaberes.setEnabled(Estado);
        GrillaDescuentos.setEnabled(Estado);
        
        txRut.setEnabled(Estado);
        txNombre.setEnabled(Estado);
        
    }
    
    private void btNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNuevoActionPerformed
        
        SetEstados(1);
        bmonto2 = 0;
        btIr.setEnabled(true);
        btCancelar.setEnabled(true); 
        btImprimir.setEnabled(false);
        
        txRut.setEnabled(true);
        txNombre.setEnabled(true);
        txRut.requestFocus();
        
        nuevo = 0;
        eligeFam = 6;
        eligePres = 200;
        Iunico = false;   
    }//GEN-LAST:event_btNuevoActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        
        if (nuevo == 0){
            
            SetEstados(1);
            btIr.setEnabled(true);
            txRut.setEnabled(true);
            txMonto.setEnabled(false); 
            lbNcargas.setText("");
            txDiasT.setText("");
            
            umes     = 0;
            thaberim = 0;
            ttrib    = 0;       
            thaber   = 0;
            tdesc    = 0;
           
            elmes    = "";  
            uagno    = "";
            
        }else{
            
            SetEstados(3);
            btImprimir.setEnabled(true);
            btAgregar.setEnabled(false);
            btEliminaDescuento.setEnabled(false);
            btEliminaHaber.setEnabled(false);
            btModifica.setEnabled(false);
            cbDetalle.setEnabled(false);
            cbTipo.setEnabled(false);
            
            txMonto.setEnabled(false);
            txNombre.setEnabled(false);
            txDiasT.setEnabled(false);
            
            txRut.requestFocus();
           
        }
        nuevo = 1;
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btIrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIrActionPerformed
        
        if (!txRut.getText().isEmpty() && txNombre.getText().isEmpty()) {  //se agrego filtro a sentencia IF
            
            CargaPersonal(txRut.getText().trim());                         //si rut no està vacío y nombre está vacío
            Dv = generaDigito(txRut.getText().trim()+"-X");
        
        }else{

        
            jdAgregaPersonas Dato = new jdAgregaPersonas(null, true);      //si rut y nombre están vacìos
            Dato.setLocationRelativeTo(null);
            Dato.setTitle("Trabajador");
            Dato.CargaDatos("SELECT rut AS codigo,nombre,dvp FROM personal WHERE rut > 1000 AND activo = true "+
                            "AND empresa = 1 ORDER BY nombre");
            
            Dato.setVisible(true);
            
            if (!Dato.GetCodigo().isEmpty()) {
                
                CargaPersonal(Dato.GetCodigo());
                Dv = generaDigito(Dato.GetCodigo().trim() + "-X");          
            
            }else{
                
               return;
            
            }
        }
        
        if (nuevo == 0){                                                    //Si es un nuevo registro
           
           SetEstados(2);
           btAgregar.setEnabled(true);
           btModifica.setEnabled(true);
                                     
           txMonto.setEnabled(true);
           txDiasT.setEnabled(true);
           txRut.setEditable(false);
           txRut.requestFocus();
           
      
                    
        }else if (nuevo == 1){                                              //Si el registro ya existe
            
            SetEstados(3);
                   
            btImprimir.setEnabled(true);
            btAgregar.setEnabled(false);
            btEliminaDescuento.setEnabled(false);
            btEliminaHaber.setEnabled(false);
            cbDetalle.setEnabled(false);
            cbTipo.setEnabled(false);
                    
            txNombre.setEnabled(false);
            txRut.requestFocus();
                   
        }
        
        AbrirRemuneracion(2);
                
    }//GEN-LAST:event_btIrActionPerformed

    public void CargaPersonal(String Rut){
        
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
                   
        try{
            
            Rs = Sql.Select("SELECT p.*, pg.nombre as contrato, pc.nombre AS depto, pg2.nombre as cargo  \n" +
                            "FROM personal p \n" +
                            "LEFT JOIN par_general pg ON p.idcontrato=pg.codigo\n" +
                            "LEFT JOIN par_general pg2 ON p.idcargo=pg2.codigo\n" +
                            "LEFT JOIN pccostos pc ON p.iddepto=pc.id  \n" +
                            "WHERE rut=" + Rut+ " AND pg.tipo IN ('TIPO_CONTRATO_PER')");
          
            if(Sql.GetRowCount()>0){
                
                Rs.next();
                
                txRut.setText(Rs.getString("rut").trim());
                txNombre.setText(Rs.getString("apellidopaterno").trim()+" "+Rs.getString("apellidomaterno").trim()+" "+Rs.getString("nombre").trim());
                nombrefirma = Rs.getString("nombre").trim()+" "+Rs.getString("apellidopaterno").trim()+" "+Rs.getString("apellidomaterno").trim();
                lbDepto.setText(Rs.getString("depto").trim());
                lbCargo.setText(Rs.getString("cargo").trim());
                lbContra.setText(Rs.getString("contrato").trim());
                lbNcargas.setText(Rs.getString("ncargas").trim());
                tipocontrato = Rs.getString("idcontrato").trim();
                
            }else{
                
                fmMain.Mensaje("El Rut no existe");
                
            }
           
        }catch (Exception e) {
            
            System.out.println(e.getMessage());
            
        }finally{
            
           Sql.Close();
        }
    }   
    
    public static String generaDigito(String rut) {
        
        int digito = 0;
        String dv = "";
        
        try{
            rut = rut.toUpperCase();
            rut = rut.replace(".", "");
            rut = rut.replace("-", "");
            
            int rutAux = Integer.parseInt(rut.substring(0, rut.length() - 1));
           
            int m = 0, s = 1;
            
            for (; rutAux != 0; rutAux /= 10) {       //rutAux = (rutAux / 10)
            
                s = (s + rutAux % 10 * (9 - m++ % 6)) % 11;
            
            }
          
            digito = s-1;
            
            if (digito == -1){
                
                dv = "K";
            
            }else{
            
                dv = Integer.toString(digito);
            }
            
        }catch (java.lang.NumberFormatException e){
        }catch (Exception e) {
        }
        return dv;
    }
    
    
    private void txRutKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txRutKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){

            btIr.doClick();
        }
    }//GEN-LAST:event_txRutKeyPressed
    
    private void cbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoActionPerformed
        
        cbDetalle.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        cbDetalle.addItem("Seleccione Detalle");
        cbDetalleId.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        cbDetalleId.addItem("Seleccione");
        
        if (cbTipo.getSelectedIndex()!=0){
            
            String tipo;
             
            if (cbTipo.getSelectedItem().equals("Haberes")){
               
                tipo = "REM_HABERES";
                              
            }else{
               
                tipo = "REM_DESCUENTOS";
            }
                
            ExeSql Sql = new ExeSql();  
            ResultSet Rs;
            
            try{
                Rs = Sql.Select("SELECT codigo, nombre FROM par_general WHERE tipo='" + tipo +"'"+
                                "AND vigente=1 ORDER BY nombre ASC");
                
                while(Rs.next()){
                
                   cbDetalle.addItem(Rs.getString("nombre"));
                   cbDetalleId.addItem(Rs.getString("codigo"));
                
                }
                    
            }
            catch (Exception e) {
                
                System.out.println(e.getMessage());
            
            }finally{
                
                Sql.Close();
            
            }
        }
    }//GEN-LAST:event_cbTipoActionPerformed
    
    private void cbDetalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDetalleActionPerformed
        
        jLabel8.setText("Monto");
        
        cbDetalleId.setSelectedIndex(cbDetalle.getSelectedIndex());       //sincroniza los indices de ambos combobox  
        
        if (cbDetalle.getSelectedItem().toString().contains("AFP")){            //COMISION AFP
             
            if (eligeAfp == 0){
                
                eligeAfp = 1;
                if (cbDetalleId.getSelectedItem().equals("12")){                            
                    txMonto.setText(afp.GetPlanVital().toString());
                    btAgregar.doClick();
                }
                if (cbDetalleId.getSelectedItem().equals("15")){
                    
                    txMonto.setText(afp.GetCapital().toString());
                    btAgregar.doClick();
                }
                if (cbDetalleId.getSelectedItem().toString().equals("16")){
                    txMonto.setText(afp.GetHabitat().toString());
                    btAgregar.doClick();
                }
                if (cbDetalleId.getSelectedItem().toString().equals("21")){
                    txMonto.setText(afp.GetProVida().toString());
                    btAgregar.doClick();
                }
                if (cbDetalleId.getSelectedItem().toString().equals("22")){
                    txMonto.setText(afp.GetModelo().toString());
                    btAgregar.doClick();
                }
                if (cbDetalleId.getSelectedItem().toString().equals("23")){
                    txMonto.setText(afp.GetCuprum().toString());
                    btAgregar.doClick();
                }
                if (cbDetalleId.getSelectedItem().toString().equals("201")){
                    
                    txMonto.setText(afp.GetUno().toString());
                    btAgregar.doClick();
                }
                
            }
        }
        
                
        if (cbDetalleId.getSelectedItem().toString().equals("5")) {             //FONASA (7%)
                
            if (eligeFonasa == 5){
                
                eligeFonasa = -5;   
                txMonto.setText("0");
                btAgregar.doClick();
            }
                
        } 
        
        if (cbDetalle.getSelectedItem().toString().contains("ISAPRE")){         //ISAPRE OBLIGATORIA (7%)
              
            if (cbDetalleId.getSelectedItem().toString().equals("17") || cbDetalleId.getSelectedItem().toString().equals("24") || 
                cbDetalleId.getSelectedItem().toString().equals("34") || cbDetalleId.getSelectedItem().toString().equals("42") ||
                cbDetalleId.getSelectedItem().toString().equals("43") || cbDetalleId.getSelectedItem().toString().equals("44")){
                  
                if (eligeIsapre == 501){
                    
                    eligeIsapre = -501;
                    txMonto.setText("0");
                    btAgregar.doClick();
                  
                }
            }
        }
        
        if (cbDetalleId.getSelectedItem().toString().equals("1")) {             //GRATIFICACION
               
            if (eligeGratf == 100){
                
               eligeGratf = -100; 
               txMonto.setText("0");
               btAgregar.doClick();
               
            }

        }
        
        if (cbDetalleId.getSelectedItem().toString().equals("13")) {            //AFP OBLIGATORIA
                           
            if (eligeCotiz == 130){
                
                eligeCotiz = -130; 
                txMonto.setText("0");
                btAgregar.doClick();
               
            }
        }
        
        if (cbDetalleId.getSelectedItem().toString().equals("14")) {            //SEGURO CESANTIA
               
            if (eligeCesan == 140){
                
                eligeCesan = -140; 
                txMonto.setText("0");
                btAgregar.doClick();
               
            }
        }
        
        if (cbDetalleId.getSelectedItem().toString().equals("19")) {            //IMPUESTO UNICO
               
            if (eligeImp == 190){
                
                eligeImp = -190; 
                txMonto.setText("0");
                btAgregar.doClick();
               
            }
        }
        
        if (cbDetalleId.getSelectedItem().toString().equals("20")) {            //PRESTAMO EMPRESA
                           
            if (eligePres == 200){
                
                eligePres = -200; 
                txMonto.setText("0");
                btAgregar.doClick();
               
            }
        }
        
        
        if (cbDetalleId.getSelectedItem().toString().equals("8")) {             //SEMANA CORRIDA
               
            if (eligeSem == 8){
                
                eligeSem = -8; 
                txMonto.setText("0");
                btAgregar.doClick();
               
            }
        }
        
        
        if (cbDetalleId.getSelectedItem().toString().equals("6")) {             //ASIGNACION FAMILIAR
               
            if (eligeFam == 6){
                
                eligeFam = -6; 
                txMonto.setText("0");
                btAgregar.doClick();
               
            }
        }
        
        if (cbDetalleId.getSelectedItem().toString().equals("45")) {          //REMUNERACION POR FERIADO LEGAL
            
            jLabel8.setText("Dias");                    
               
        }
        
        
        if(cbDetalleId.getSelectedItem().toString().equals("41")){              //HORAS EXTRAS
         
           jLabel8.setText("Horas");
        
        }
        
        if(cbDetalleId.getSelectedItem().toString().equals("18")){              //ADICIONAL ISAPRE
         
           jLabel8.setText("U.F.");
        
        }
        
//        if(cbDetalleId.getSelectedItem().toString().equals("28") && txRut.getText().equals("13516883")){              //COMISION POR VENTAS (LEONARDO)
//         
//           jLabel8.setText("%");
//        
//        }
        
        if(cbDetalleId.getSelectedItem().toString().equals("38")){              //BONO CUNMPLIMIENTO FACTURACION
         
           txMonto.setText("0");
        
        }
        
    }//GEN-LAST:event_cbDetalleActionPerformed

 
    private void btAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAgregarActionPerformed
        
        double dhaber     = 0;
        double mPor       = 0;
        double totalr     = 0;
        double porcentaje = 0;
        double ddesc      = 0;
        double sbase      = 0;
        double dsem       = 0;
       
        String dnombre    = "";
        String dcodigo    = "";
        
        ExeSql Sql = new ExeSql();
        ExeSql Sql3 = new ExeSql();
        ResultSet Rs;
        ResultSet Rs3;
              
        if(txMonto.getText().equals("")){
            
          fmMain.Mensaje("Debe ingresar un monto");  
          return;
        
        }   
              
        if(txTotal.getText().equals("")){
            
           txTotalHaber.setText("0");
           txTotalImp.setText("0");
           txTotalTrib.setText("0");
           txTotalDesc.setText("0"); 
           txTotal.setText("0");
        }
     
//***************************************************** HABERES *********************************************************//   
        
        if(cbTipo.getSelectedItem().equals("Haberes")){
            
            dtrib = 0;
            ttrib = 0;  
            int codigo_bono = 0;
                                   
            DefaultTableModel Modelh = (DefaultTableModel) GrillaHaberes.getModel();
            
            dhaber  = Double.valueOf(txMonto.getText());  
            dnombre = cbDetalle.getSelectedItem().toString().trim();            
            dcodigo = cbDetalleId.getSelectedItem().toString().trim();          
            
            for(int i=0; i< GrillaHaberes.getRowCount();i++){                   
              
                if (GrillaHaberes.getValueAt(i,2).toString().trim().equals("0")){                       //SUELDO BASE
                     
                    String result = GrillaHaberes.getValueAt(i, 1).toString().trim().replaceAll("\\$","");  
                    String result2 = result.replaceAll("\\.","");
                    sbase = Double.parseDouble(result2.trim());                 
                }
                
                if (GrillaHaberes.getValueAt(i,2).toString().trim().equals(dcodigo)){                   //Si el item (haber o descuento) ya está ingresado a la grilla
                    
                   fmMain.Mensaje("Usted ya ingresó el item: "+cbDetalle.getSelectedItem().toString());
                   txMonto.setText("");
                   txMonto.requestFocus();
                   return;    
                }            
            }
              
  //************************************** HABERES IMPONIBLES *********************************************************************************//   
            if (!dcodigo.equals("1") && !dcodigo.equals("2") && !dcodigo.equals("3") && !dcodigo.equals("6")            //Haberes Imponibles   
               && !dcodigo.equals("7") && !dcodigo.equals("29") && !dcodigo.equals("32")){
                
       //******************************* HABERES RENTAS VARIABLES *******************************************************************************//         
                if (dcodigo.equals("4") || dcodigo.equals("9") || dcodigo.equals("10") ||                               //Rentas Variables
                    dcodigo.equals("11") || dcodigo.equals("28") || dcodigo.equals("36") ||
                    dcodigo.equals("37") || dcodigo.equals("38") || dcodigo.equals("39") ||
                    dcodigo.equals("75") || dcodigo.equals("76") ){
                    
                    bmonto = Double.parseDouble(txMonto.getText());             
                    bmonto2 = Double.parseDouble(txMonto.getText());
                    
                    try {

                        int codigo = Integer.parseInt(dcodigo);
                        String Agno = cbAgno.getSelectedItem().toString();
                        int Mes = cbMes.getSelectedIndex()-1;
                        
                        
                        if (!dcodigo.equals("75") && !dcodigo.equals("76") && !dcodigo.equals("4") ){  //COMISION VENTAS CARTERA 1 y 2, GRATIFIC. VOLUNTARIA EXTRAORD
                        
                            Rs = Sql.Select("SELECT * FROM personalhd WHERE rut='"+ txRut.getText().trim() +"' \n"+
                                            "AND codigo = "+codigo);
                        
                            if (Sql.GetRowCount() > 0){  
                        
                                Rs.next();
                                codigo_bono = Rs.getInt("cod_bono");            
                        
                            }else{
                            
                                return;    
                            }
                            
                        }else {
                        
                            codigo_bono = 0;              
                        
                        }
                        
                   //*********************************************** SEMANAS CORRIDAS ***********************************************//      
                                              
                        dcant = Integer.parseInt(txDiah.getText());             //dias trabajados 
                        dcant2 = Integer.parseInt(txDiaf.getText());            //domingos y festivos
                        
                   //***************************************************************************************************************//     
                        
                        jdBuscaBonosyComisiones ByC = new jdBuscaBonosyComisiones(codigo,codigo_bono,Agno,Mes,dcant,dcant2);
                        
                        dhaber = ByC.GetCom();                                                           
                        dsem = ByC.GetSem();
                                               
                        tsem_corr = tsem_corr + dsem;                             //Se suman los montos para la semana corrida
                        trenta_var = trenta_var + dhaber;                         //Se suman las rentas variables
                       
                        txMonto.setText("");
                        
                        csemana.setText(String.valueOf(tsem_corr));              
                        
                        
                    }catch (IOException | SQLException ex) {
                        
                        Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
         //************************************************************* FIN RENTAS VARIABLES ************************************************************//         
                
//                if (dcodigo.equals("200")){
//                
//                     
//                }
                
                if (dcodigo.equals("8")){                                       //SEMANA CORRIDA
                    
                    csemana.setText(String.valueOf(tsem_corr)); 
                                       
                    if (tsem_corr == 0){
                    
                        fmMain.Mensaje("La Liquidación no registra Rentas Variables");
                        eligeSem = 8;
                        txMonto.setText("");      
                        return;
                        
                    }
                    
                    dhaber = tsem_corr;
                    trenta_var = trenta_var + dhaber;                           //Se suma la semana corrida como renta variable
                    semana = true;
                    
                }
                
                if (dcodigo.equals("35")){                                       //DIFERENCIA PAGO HORAS EXTRAS
                    
                    dhaber = Double.parseDouble(txMonto.getText().trim());
                    trenta_var = trenta_var + dhaber;                          
                    
                }
                
                if (dcodigo.equals("41")){                                                                  //HORAS EXTRAS     
                    
                    double horax = Double.parseDouble(txMonto.getText());           
                    
                    String decimal2 = txMonto.getText().substring(txMonto.getText().indexOf('.') + 2); //se extrae el valor del segundo decimal desde el punto a la derecha
                    String str = String.valueOf(horax);
                    
                    double valorh = sbase * 0.0077777;      //Cálculo el valor hora incluyendo el recargo del 50%
                    double valorm = valorh / 60;            //Cálculo valor minuto
                                                           
                    int nEntero = Integer.parseInt(str.substring(0, str.indexOf('.')));      //se extrae el valor entero 
                    int nDecimal = Integer.parseInt(str.substring(str.indexOf('.') + 1));  //se extrae el valor del primer decimal desde el punto a la derecha
                    
                    if (decimal2.equals("0")){       //Si el segundo decimal es un cero 
  
                        nDecimal = nDecimal * 10;    // se agrega para que no desparezca (multiplicando el primer decimal * 10   
                    }
                  
                    
                    double totalh = nEntero * valorh;            //se calcula el valor total ($) de horas
                    double totalm = nDecimal * valorm;           //se calcula el valor total ($) de minutos
                    
                    dhaber = totalh + totalm;                  
                     
                    String stexto = "  "+nEntero+"(Horas)"; 
                    
                    if (nDecimal > 0){
                        
                        if (nDecimal > 59){
                        
                          fmMain.Mensaje("minutos no pueden ser mayor a 59");           
                          
                          txMonto.setText("");
                          return;
                        }
                        
                        stexto = stexto + " y "+nDecimal+" (Minutos)"; 
                    }
                    
                    dnombre = dnombre + stexto;
                    
                    txMonto.setText("");
                     
                }

                if (dcodigo.equals("45")){                                                  //REMUNERACION POR FERIADO LEGAL
                   
                    int mes =  cbMes.getSelectedIndex();
                    int mes1 =  cbMes.getSelectedIndex()-1;
                    int mes2 =  cbMes.getSelectedIndex()-2;
                    int mes3 =  cbMes.getSelectedIndex()-3;
                    int agno = Integer.parseInt(cbAgno.getSelectedItem().toString().trim())-1;
                   
                    try{   
                       
                       Rs = null;
                       
                        if (mes == 1){       
                       
                            Rs = Sql.Select("SELECT SUM (monto) AS rentavar FROM psueldosdet WHERE rut='"+ txRut.getText().trim() +"' \n"+
                                            "AND codigo = '72' \n"+
                                            "AND agno = '"+ agno + "' \n"+
                                            "AND mes IN (10,11,12)");
                        
                       }else if (mes == 2){
                       
                            Rs = Sql.Select("SELECT SUM (monto) AS rentavar FROM psueldosdet WHERE rut='"+ txRut.getText().trim() +"' \n"+
                                            "AND codigo = '72' \n"+
                                            "AND (agno = '"+ agno + "' AND mes IN (11,12) \n"+
                                            "OR agno = '"+ cbAgno.getSelectedItem().toString().trim() + "' AND mes IN (1) AND codigo = '72')");
                        
                       }else if (mes == 3){
                       
                            Rs = Sql.Select("SELECT SUM (monto) AS rentavar FROM psueldosdet WHERE rut='"+ txRut.getText().trim() +"' \n"+
                                            "AND codigo = '72' \n"+
                                            "AND (agno = '"+ agno + "' AND mes IN (12) \n"+
                                            "OR agno = '"+ cbAgno.getSelectedItem().toString().trim() + "' AND mes IN (1,2)  AND codigo = '72')");
                        
                       }else{
                       
                             Rs = Sql.Select("SELECT SUM (monto) AS rentavar FROM psueldosdet WHERE rut='"+ txRut.getText().trim() +"' \n"+
                                            "AND codigo = '72' \n"+
                                            "AND agno='"+ cbAgno.getSelectedItem().toString().trim() + "' \n"+
                                            "AND mes IN ("+mes1+","+mes2+","+mes3+")");
                       
                       }
                        
                        Rs.next();
                        double renta = Rs.getDouble("rentavar");
                        int tdias = Integer.parseInt(txMonto.getText());  
                        
                        dhaber = Math.round((renta / 3)/30) * tdias;
                        txMonto.setText("");
                        
                       
                    }catch (SQLException ex) {
                       
                        Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
                }      
                
                thaberim = thaberim + dhaber;          
                
                Recalc = true;
                Recalc2 = true;
                jLabel8.setText("Monto");
                
   //********************************************* FIN HABERES IMPONIBLES ************************************************************//              
            }else if (dcodigo.equals("1")){
                   
                  Recalc2 = true; 
                  Recalc = true; 
                  
            }else{
            
               Recalc = false;                         //Si se ingresa un haber No-Imponible no se realiza el recálculo de la Gratificación
               Recalc2 = false; 
            }
            
            if (dcodigo.equals("6")){                  //ASIGNACION FAMILIAR
             
                
                int agno = 0; 
                
                if (lbNcargas.getText().equals("0")){
                    
                     fmMain.Mensaje("El trabajador no posee Cargas Familiares");
                     txMonto.setText("");
                     lbTramo.setText("D");
                    
                     return;
                }
                
                if (cbMes.getSelectedIndex() > 6){
                     
                    agno = Integer.parseInt(cbAgno.getSelectedItem().toString().trim());
                    
                }else if (cbMes.getSelectedIndex() <= 6){
                
                    agno = Integer.parseInt(cbAgno.getSelectedItem().toString().trim())-1;
                }
                   
                try{   
                    
                    Rs = Sql.Select("SELECT SUM (monto) AS totimp FROM psueldosdet WHERE rut='" + txRut.getText().trim() +"' \n" +
                                    "AND codigo = '71' \n" +
                                    "AND agno='" + agno + "' \n" +
                                    "AND mes IN (1,2,3,4,5,6)");
                        
                    Rs.next();
                       
                    double timp = Math.round(Rs.getDouble("totimp")/6);
                        
                    if (timp > afamilia.GetRango4()){
                    
                        fmMain.Mensaje("Al trabajador no le correspónde Asignación Familiar");
                        eligeFam = -6;
                        txMonto.setText("");
                        lbTramo.setText("D");
                            
                        return;
                    }
                        
                         
                    dhaber = afamilia.compara(timp) * Integer.parseInt(lbNcargas.getText());
                        
                    lbTramo.setText(afamilia.GetTramo());
                        
                }catch (SQLException ex) {
                        
                    Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
                    
                }
             
            }
            
            thaber = thaber + dhaber;    
            
            Modelh.addRow(new Object[]{dnombre,"$ "+formateador.format(dhaber),dcodigo});                 
            txMonto.setText("");
            txMonto.requestFocus();   
     
   //******************************* RECALCULA GRATIFICACION ********************************//
            RecalGratif(Recalc);
   //**************************************  SE ACTUALIZA LOS CALCULOS DE DESCUENTOS *******************************************//  
            RecalDesc(Recalc2);
   //********************************************************************************************************************************//      
            
   //****************************************************** CALCULA COTIZACIONES CON CARGO AL EMPLEADOR **************************************//     
            
            double dcotiz = 0; 
        
            if (tipocontrato.trim().equals("62")){                              //CONTRATO INDEFINIDO
            
                if (!txRut.getText().trim().equals("5925941")){
                
                   // dcotiz = Precision.round(himponibleces*0.024, 4);
                    dcotiz = Precision.round(himponibleces*AFC2,4);
                
                }else if (txRut.getText().trim().equals("5925941")){
                
                    dcotiz = 0;
                
                }        
                
            }else if (tipocontrato.trim().equals("61")){                        //CONTRATO FIJO
                 
                if (!txRut.getText().trim().equals("5925941")){
                
                    //dcotiz = Precision.round(himponibleces*0.030, 0);
                    dcotiz = Precision.round(himponibleces*AFC1,0);
                
                }else if (txRut.getText().trim().equals("5925941")){
                
                    dcotiz = 0;
                
                }
                        
            }else if (tipocontrato.trim().equals("66")){                        //HONORARIOS
                     
                dcotiz = Precision.round(himponible*0.0, 0); 
            
            }else if (tipocontrato.trim().equals("67")){                        //PRACTICA
                     
                dcotiz = Precision.round(himponible*0.0, 0); 
            
            }
                
            txCesantia.setText("$ "+formateador.format(dcotiz));
  //***********************************************************************************************      
            
           // dcotiz = Precision.round(himponible*0.0127, 4);                     //SEGURO ACCIDENTE EN EL TRABAJO
            dcotiz = Precision.round(himponible*MUTUAL,4);
             
            txMutual.setText("$ "+formateador.format(dcotiz));
            
  //*************************************************************************************************        
            
            if (!txRut.getText().trim().equals("5925941")){
                
               // dcotiz = Precision.round(himponible*0.0199, 4);                  //SEGURO DE INVALIDEZ Y SOBREVIVENCIA
                dcotiz = Precision.round(himponible*SIS,4);
            
            }else if (txRut.getText().trim().equals("5925941")){
            
                dcotiz = 0; 
            
            }
            
            txSis.setText("$ "+formateador.format(dcotiz));
         
       //********************************************* DESCUENTOS ****************************************************************//   
        
        }else if(cbTipo.getSelectedItem().equals("Descuentos")){
            
              tdesc = 0;
                             
              dnombre = cbDetalle.getSelectedItem().toString().trim();
              dcodigo = cbDetalleId.getSelectedItem().toString().trim();
                          
 //***************************************************** CICLO DE VERIFICACION *************************************************************//         
              
              for(int i=0; i< GrillaDescuentos.getRowCount();i++){
                                         
                if (GrillaDescuentos.getValueAt(i,0).toString().contains(dnombre)){
                     
                    fmMain.Mensaje("Usted ya ingreso un item: "+cbDetalle.getSelectedItem().toString());
                    txMonto.setText("");
                    return; 
                }   
                 
                if(dnombre.contains("AFP")){
                    
                    if (GrillaDescuentos.getValueAt(i,0).toString().contains("AFP")){
                     
                        fmMain.Mensaje("Usted ya ingreso una AFP");
                        txMonto.setText("");
                        return; 
                    } 
                 
                }
                    
                if(dnombre.contains("FONASA")){
                    
                    if (GrillaDescuentos.getValueAt(i,0).toString().contains("ISAPRE")){
                           
                        fmMain.Mensaje("Usted ya ingreso un Sistema de Salud elegido");
                        txMonto.setText("");
                        return; 
                    } 
                 
                }
                    
                                   
                if(dcodigo.equals("17") || dcodigo.equals("24") || dcodigo.equals("34") || dcodigo.equals("42") || dcodigo.equals("43") || dcodigo.equals("44")){    
                   
                    if (GrillaDescuentos.getValueAt(i,0).toString().contains("FONASA")){
                   
                        fmMain.Mensaje("Usted ya ingreso un Sistema de Salud elegido");
                        tieneIsapre = false;
                        txMonto.setText("");
                        return; 
                    }else{
                    
                       tieneIsapre = true;
                    } 
                 
                }
                    
              }
              
   //**************************************************** FIN CICLO DE VERIFICACION ******************************************************************//           
              
              if(dcodigo.equals("5")){                          //FONASA
                
                tieneIsapre = false;
                porcentaje = 0.07;
                mPor = porcentaje*100;
                dnombre = cbDetalle.getSelectedItem().toString().trim()+" ("+Math.round(mPor)+"%)";
                ddesc = himponible * porcentaje;
                
              }else if(dcodigo.equals("17") || dcodigo.equals("24") || dcodigo.equals("34") || dcodigo.equals("42") || dcodigo.equals("43") || dcodigo.equals("44")){   //ISAPRE OBLIGATORIO
                      
                    porcentaje = 0.07;
                    mPor = porcentaje*100;
                    dnombre = cbDetalle.getSelectedItem().toString().trim()+" ("+Math.round(mPor)+"%)";
                    ddesc = himponible * porcentaje;   
                    cubreIsapre = ddesc;
                    tieneIsapre = true;
              
              }else if(dcodigo.equals("18")){                   //ADICIONAL ISAPRE
                
                    if (tieneIsapre){
                       
                        porcentaje = 0;
               
                        dnombre = cbDetalle.getSelectedItem().toString().trim();
                        double planIsapre = Double.parseDouble(txMonto.getText()) * ind.GetUfIsapre();
                       
                        if(planIsapre <= cubreIsapre){
                          
                          fmMain.Mensaje("No se generó diferencia en Plan Isapre");
                          txMonto.setText(""); 
                          return;  
                          
                        }else{
                        
                             ddesc = planIsapre - cubreIsapre;  
                                        
                        }
                       
                        jLabel8.setText("Monto");
                        
                    }else{
                        
                        fmMain.Mensaje("Debe ingresar una Isapre");
                        txMonto.setText("");
                        return; 
                       
                    }
                
              }else if(dnombre.contains("AFP")){                    //COMISION AFP
                
                  porcentaje = Double.valueOf(txMonto.getText()); 
                  mPor = porcentaje*100;
                  dnombre = cbDetalle.getSelectedItem().toString().trim()+" ("+mPor+"%)";
                  ddesc = himponible * porcentaje;
                    
              }else if(dcodigo.equals("13")){                       //AFP OBLIGATORIO
                
                  porcentaje = 0.10;
                  mPor = porcentaje*100;
                  dnombre = cbDetalle.getSelectedItem().toString().trim()+" ("+Math.round(mPor)+"%)";
                  ddesc = himponible * porcentaje;
                
              }else if(dcodigo.equals("14")){                       //SEGURO CESANTIA
                  
                  if (!tipocontrato.trim().equals("62")){
                  
                     fmMain.Mensaje("No se puede descontar SEGURO DE CESANTIA \n porque el trabajador no tiene Ccntrato Indefinido");
                     txMonto.setText("");
                     return; 
                  
                  }
                  
                  porcentaje = 0.006;
                  mPor = porcentaje*100;
                  dnombre = cbDetalle.getSelectedItem().toString().trim()+" ("+mPor+"%)";
                  ddesc = himponibleces * porcentaje;
                   
              }else if(dcodigo.equals("19")){                       //IMPUESTO UNICO
                  
                  imes = cbMes.getSelectedIndex()-1;
                                 
                  if (ttrib < impunico.Getrango1()){                                   //Si renta está no afceta a Impuesto único, no se puede agregar el descuento
                      
                      fmMain.Mensaje("Esta Renta no está afecta al IMPUESTO UNICO"); 
                      txMonto.setText("");
                      return;
                  }
                  
                  porcentaje = 0;
                  dnombre = cbDetalle.getSelectedItem().toString().trim();
                  
                  ddesc = impunico.compara(ttrib);
                  
              }else if(dcodigo.equals("20")){                       //PRESTAMO EMPRESA
                  
                    try {
                        
                        Rs3 = Sql3.Select("SELECT * FROM personal_plhx \n"+
                                          "WHERE rut=" + txRut.getText().trim() + "\n" +
                                          "AND tipo = 5 \n" +
                                          "AND activo = 1 \n" +
                                          "AND EXTRACT(YEAR FROM dfecha) <= "+iagno + "\n"+
                                          "AND (EXTRACT(MONTH FROM dfecha)>= "+(imes) + " OR EXTRACT(MONTH FROM dfecha)<= "+(imes) + ")\n"+ 
                                          "AND EXTRACT(YEAR FROM hfecha) >= "+iagno + "\n"+
                                          "AND (EXTRACT(MONTH FROM hfecha)>= "+(imes) + " OR EXTRACT(MONTH FROM hfecha)<= "+(imes) + ")\n"+  
                                          "ORDER BY dfecha ASC");
                      
                        if (Sql3.GetRowCount() == 0){     
                        
                            fmMain.Mensaje("El trabajador no registra Préstamos"); 
                            txMonto.setText("");
                            return;
                        }
                        
                        
                        Rs3.next();
                        
                        Date fechad = new Date();
                        Date fechah = new Date();
                          
                        fechad = Rs3.getDate("dfecha");
                        fechah = Rs3.getDate("hfecha");
                          
                        cal2.setTime(hoy);
                        cal3.setTime(fechad);
                        cal4.setTime(fechah);
                         
                        int aagno = cal4.get(Calendar.YEAR);
                        
                        int ames = cal2.get(Calendar.MONTH)+1; 
                        int dmes = cal3.get(Calendar.MONTH)+1;                          
                        int hmes = cal4.get(Calendar.MONTH)+1;   
                        
                        
                        System.out.println("MES ACTUAL : "+ames);
                        System.out.println("MES INICIO : "+dmes);
                        System.out.println("MES FINAL : "+hmes);
                        
                        
                        if (aagno == iagno){   
                        
                            if (ames > hmes){
                            
                               fmMain.Mensaje("El trabajador no registra Préstamos"); 
                               txMonto.setText("");
                               return;
                            
                            }
                        }
                        
                        
                        if (iagno > aagno){
                        
                            fmMain.Mensaje("El trabajador no registra Préstamos"); 
                            txMonto.setText("");
                            return;
                            
                        }
                        
                        
                        int adif1 = cal4.get(Calendar.YEAR) - cal3.get(Calendar.YEAR); 
                        tCuotas = (adif1 * 12 + hmes - dmes)+1;
                          
                        int adif2 = cal2.get(Calendar.YEAR) - cal3.get(Calendar.YEAR); 
                        cMes = (adif2 * 12 + ames - dmes)+1;  
                 
        
                        porcentaje = 0;
                        dnombre = cbDetalle.getSelectedItem().toString().trim()+" (Cuota "+cMes+" de "+tCuotas+")";
                  
                        ddesc = Rs3.getDouble("ndias_horas");
                      
                      
                  }catch (SQLException ex) {
                      
                      Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
                  
                  }
                  
              }else if(dcodigo.equals("25")){                       //APV A 
                  
                  double topeApv = 0;
                  
                  porcentaje = 0;
                  dnombre = cbDetalle.getSelectedItem().toString().trim();
                  ddesc = Double.parseDouble(txMonto.getText());
                  
                  topeApv = Precision.round(ind.GetTopeApvM() * ind.GetUfIsapre(),0);
                             
                  if (ddesc > (ind.GetTopeApvM() * ind.GetUfIsapre())){
                             
                      ddesc = (ind.GetTopeApvM() * ind.GetUfIsapre());
                  }
                  
              }else if(dcodigo.equals("33")){                       //APV B
                  
                  double topeApv = 0;
                  
                  porcentaje = 0;
                  dnombre = cbDetalle.getSelectedItem().toString().trim();
                  ddesc = Double.parseDouble(txMonto.getText());
                  
                  topeApv = Precision.round(ind.GetTopeApvM() * ind.GetUfIsapre(),0);
                             
                  if (ddesc > (ind.GetTopeApvM() * ind.GetUfIsapre())){
                             
                      ddesc = (ind.GetTopeApvM() * ind.GetUfIsapre());
                  }
              
              }else if(dcodigo.equals("78")){                       //DESCUENTOS
                 
                   jdGetTexto Texto = new jdGetTexto(null, true); 
                   Texto.setLocationRelativeTo(null);
                   Texto.setVisible(true);
                   String stexto = Texto.GetTexto(); 
                  
                  porcentaje = 0;
                  dnombre = cbDetalle.getSelectedItem().toString().trim()+" ("+stexto+")";
                  
                  ddesc = Double.valueOf(txMonto.getText()); 
                
              }else if(dcodigo.equals("79")){                       //PRESTAMO CAJA COMPENSACION
                 
//                   jdGetTexto Texto = new jdGetTexto(null, true); 
//                   Texto.setLocationRelativeTo(null);
//                   Texto.setVisible(true);
//                   String stexto = Texto.GetTexto(); 
                  
                  porcentaje = 0;
//                  dnombre = cbDetalle.getSelectedItem().toString().trim()+" ("+stexto+")";
                  dnombre = cbDetalle.getSelectedItem().toString().trim();
                  
                  ddesc = Double.valueOf(txMonto.getText()); 
                
              }else{
                     
                  porcentaje = 0;
                  ddesc = Double.valueOf(txMonto.getText());  
                 
              }
  
                
              txMonto.setText("");
              txMonto.requestFocus();
                          
              DefaultTableModel Model = (DefaultTableModel) GrillaDescuentos.getModel();
              Model.addRow(new Object[]{dnombre,"$ "+formateador.format(ddesc),dcodigo,porcentaje});
       
              dtrib = 0;
              
              for (int i=0; i< GrillaDescuentos.getRowCount();i++){
                    
                  String dnom = GrillaDescuentos.getValueAt(i, 0).toString().trim();
                  String dcod = GrillaDescuentos.getValueAt(i, 2).toString().trim();
                    
                  String result = GrillaDescuentos.getValueAt(i, 1).toString().trim().replaceAll("\\$","");
                  String result2 = result.replaceAll("\\.","");
                  ddesc = Double.parseDouble(result2.trim());
                     
                  if (dcod.equals("5") || dcod.equals("13") || dcod.equals("14") || dnom.contains("AFP") || dnom.contains("ISAPRE")  || dcod.equals("33") ){  //DESCUENTOS TRIBUTABLES
                    
                     dtrib = dtrib + ddesc;
                    
                  }
                    
                  tdesc = tdesc + ddesc;
              }
              
              ttrib = thaberim - dtrib;                                      //  de lo contrario se realiza el descuento normal 
              
              totalr = thaber - tdesc;
               
              
              txTotalHaber.setText("$ "+formateador.format(thaber));
              txTotalImp.setText("$ "+formateador.format(thaberim));
              txTotalTrib.setText("$ "+formateador.format(ttrib));
              txTotalDesc.setText("$ "+formateador.format(tdesc));
              txTotal.setText("$ "+formateador.format(totalr));   
              
             
        }else if(cbTipo.getSelectedItem().equals("Seleccione Tipo")){
           
               fmMain.Mensaje("Debe seleccionar Tipo");
               
           
        }else if(cbDetalle.getSelectedItem().equals("Seleccione Detalle")){
             
               fmMain.Mensaje("Debe seleccionar un detalle");
               
        }
       
    }//GEN-LAST:event_btAgregarActionPerformed
    
    
    private void btGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGuardarActionPerformed
        
        if(cbAgno.getSelectedIndex()<=0 || cbMes.getSelectedIndex()<=0){
          
           fmMain.Mensaje("Debe seleccionar MES y AÑO");
           return;
        }
        
        if(txSis.getText().isEmpty() || txMutual.getText().isEmpty() || txCesantia.getText().isEmpty()){
          
          fmMain.Mensaje("Falta información");      
          return;
        
        }
        
        if (!semana && tsem_corr > 0){                                      //Si hay rentas variables y no se agregó valor total Semana Corrida
        
           fmMain.Mensaje("Debe Ingresar SEMANA CORRIDA"); 
           txDiasT.requestFocus();
           return;
        }
        
        if (txDiasT.getText().equals("")){                                      //Si no se han ingresado los dias trabajados
        
           fmMain.Mensaje("Debe Ingresar DIAS TRABAJADOS"); 
           txDiasT.requestFocus();
           return;
        }
        
        for(int i=0; i< GrillaDescuentos.getRowCount();i++){
                
            if (GrillaDescuentos.getValueAt(i,2).toString().trim().equals("19")){            //SI EXITE DESCUENTO A IMPUESTO UNICO
               
                Iunico = true;                                              
            }
        }
        
        if (!Iunico && ttrib > impunico.Getrango1()){                           //Si renta está afecta a Impuesto único y no se ha realizado el descuento en la liquidación
           
           fmMain.Mensaje("Debe Ingresar IMPUESTO UNICO"); 
           
           if (eligeImp == 190){
                
                eligeImp = -190; 
                String dnom = "IMPUESTO UNICO";
                String dcod = "19";
                double porcent = 0;
                  
                double desc = impunico.compara(ttrib);
                DefaultTableModel Modelx = (DefaultTableModel) GrillaDescuentos.getModel();
                Modelx.addRow(new Object[]{dnom,"$ "+formateador.format(desc),dcod,porcent});
               
           }
           
//           return;
        }

        
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        
        try{
     
        //************************************************  HABERES *****************************************************//
            for(int i=0; i< GrillaHaberes.getRowCount();i++){
                    
                String result = GrillaHaberes.getValueAt(i, 1).toString().trim().replaceAll("\\$","");
                String result2 = result.replaceAll("\\.","");
                double result3 = Double.parseDouble(result2.trim());
                        
                Rs = Sql.Select("SELECT * FROM psueldosdet WHERE rut='"+ txRut.getText().trim() +"'\n"+
                                "AND codigo='"+ GrillaHaberes.getValueAt(i,2).toString().trim() + "'\n"+
                                "AND agno='"+ cbAgno.getSelectedItem().toString().trim() + "'\n" + 
                                "AND mes='"+cbMes.getSelectedIndex()+"'");
                
                if (Sql.GetRowCount()>0){   //se guardan los haberes de una liquidación que ya existe
                    
                    if (nuevo==0){
                        
                        fmMain.Mensaje("La Liquidacion ya existe! ");
                        return;
                        
                    }else if (nuevo==1){        //se actualizan los haberes de una liquidacion existente
                       
                        Rs.next();
                        Sql.ExeSql("UPDATE psueldosdet SET \n" +
                                   "rut='"+ txRut.getText().trim() +"',\n" +
                                   "agno='"+ cbAgno.getSelectedItem().toString().trim() +"',\n" +
                                   "mes='"+ cbMes.getSelectedIndex() +"',\n" +
                                   "codigo='"+ GrillaHaberes.getValueAt(i,2) +"',\n" +
                                   "monto="+ Math.round(result3)+",\n"+
                                   "dtrab="+ txDiasT.getText().trim()+",\n"+
                                   "tramo_fam='"+ lbTramo.getText().trim()+"'\n"+
                                   "WHERE rut='"+ txRut.getText().trim() +"'\n" +
                                   "AND agno='" + cbAgno.getSelectedItem().toString().trim() + "'\n"+
                                   "AND mes='"+cbMes.getSelectedIndex()+"'\n" +
                                   "AND codigo="+GrillaHaberes.getValueAt(i,2));
                    }
                              
                }else if (Sql.GetRowCount()==0){                                //se graban los haberes de una nueva liquidacion
                 
                      if(GrillaHaberes.getValueAt(i,2).toString().trim().equals("0")){
                      
                            Sql.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,dtrab,empresa) VALUES(\n" +
                                       txRut.getText().trim() + ",\n" +
                                       cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                       cbMes.getSelectedIndex()+ ",\n" +
                                       GrillaHaberes.getValueAt(i,2).toString().trim()+ ",\n" +
                                       Math.round(result3)+ ",\n" +
                                       txDiasT.getText().trim()+ ",\n" +
                                       1+")");
                      
                      }else if(GrillaHaberes.getValueAt(i,2).toString().trim().equals("8")){        //SEMANA CORRIDA
                      
                            Sql.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,dtrab,feriados,empresa) VALUES(\n" +
                                       txRut.getText().trim() + ",\n" +
                                       cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                       cbMes.getSelectedIndex()+ ",\n" +
                                       GrillaHaberes.getValueAt(i,2).toString().trim()+ ",\n" +
                                       Math.round(result3)+ ",\n" +
                                       dcant+",\n" +
                                       dcant2+ ",\n"+
                                       1+")");
                            
                            
                      }else if(GrillaHaberes.getValueAt(i,2).toString().trim().equals("6")){      //ASIGNACION FAMILIAR
                        
                            Sql.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,dtrab,tramo_fam,empresa) VALUES(\n" +
                                       txRut.getText().trim() + ",\n" +
                                       cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                       cbMes.getSelectedIndex()+ ",\n" +
                                       GrillaHaberes.getValueAt(i,2).toString().trim()+ ",\n" +
                                       Math.round(result3)+ ",\n" + 0 + ",'"+ lbTramo.getText()+ "',\n" +
                                       1+")");
                            
                      }else if(GrillaHaberes.getValueAt(i,2).toString().trim().equals("41")){      //HORAS EXTRAS 
                        
                            Sql.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,dtrab,empresa,descripcion) VALUES(\n" +
                                       txRut.getText().trim() + ",\n" +
                                       cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                       cbMes.getSelectedIndex()+ ",\n" +
                                       GrillaHaberes.getValueAt(i,2).toString().trim()+ ",\n" +
                                       Math.round(result3)+ ",\n" + 0 + ",\n"+
                                       1+",'"+
                                       GrillaHaberes.getValueAt(i,0).toString().trim()+"')");
                            
                      }else{
                        
                            Sql.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,dtrab,empresa) VALUES(\n" +
                                       txRut.getText().trim() + ",\n" +
                                       cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                       cbMes.getSelectedIndex()+ ",\n" +
                                       GrillaHaberes.getValueAt(i,2).toString().trim()+ ",\n" +
                                       Math.round(result3)+ ",\n" + 0 + ",\n"+
                                       1+")");
                            
                      }
                      
                      
                      
                }
            }
                
     //********************************************** DESCUENTOS **************************************************************// 
            
            
            for(int i=0; i< GrillaDescuentos.getRowCount();i++){
                
                String result = GrillaDescuentos.getValueAt(i, 1).toString().trim().replaceAll("\\$","");
                String result2 = result.replaceAll("\\.","");
                double result3 = Double.parseDouble(result2.trim());
               
                Rs = Sql.Select("SELECT * FROM psueldosdet WHERE rut='"+ txRut.getText().trim() +"'\n"+
                                "AND codigo='"+ GrillaDescuentos.getValueAt(i,2).toString().trim() + "'\n"+
                                "AND agno='"+ cbAgno.getSelectedItem().toString().trim() + "'\n" +
                                "AND mes='"+cbMes.getSelectedIndex()+"'");
                
                
                if (Sql.GetRowCount()>0){           //se actualizan los descuentos de una liquidacion existente
                            
                    Rs.next();
                    Sql.ExeSql("UPDATE psueldosdet SET \n" +
                               "rut='"+ txRut.getText().trim() +"',\n" +
                               "agno='"+ cbAgno.getSelectedItem().toString().trim() +"',\n" +
                               "mes='"+ cbMes.getSelectedIndex() +"',\n" +
                               "codigo='"+ GrillaDescuentos.getValueAt(i,2) +"',\n" +
                               "monto="+ Math.round(result3)+",\n"+
                               "porcentaje="+ GrillaDescuentos.getValueAt(i,3)+"\n"+
                               "WHERE rut='"+ txRut.getText().trim() +"'\n" + 
                               "AND agno='" + cbAgno.getSelectedItem().toString().trim() + "'\n"+
                               "AND mes='"+cbMes.getSelectedIndex()+"'\n" +
                               "AND codigo="+GrillaDescuentos.getValueAt(i,2));
                              
                }else if (Sql.GetRowCount()==0){     // Se graban los descuentos de una nueva liquidacion
                        
                        if(GrillaDescuentos.getValueAt(i,2).toString().trim().equals("20")){      //PRESTAMO EMPRESA
                    
                            Sql.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,porcentaje,dtrab,empresa) VALUES(\n" +
                                        txRut.getText().trim() + ",\n" +
                                        cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                        cbMes.getSelectedIndex()+ ",\n" +
                                        GrillaDescuentos.getValueAt(i,2).toString().trim()+ ",\n" +
                                        Math.round(result3)+ ","+tCuotas+","+cMes+","+1+")");
                            
                            
                        }else if(GrillaDescuentos.getValueAt(i,2).toString().trim().equals("78") ||      //DESCUENTO
                               GrillaDescuentos.getValueAt(i,2).toString().trim().equals("79")){      //PRESTAMO CAJA COMPENSACION
                        
                             Sql.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,porcentaje,dtrab,empresa,descripcion) VALUES(\n" +
                                        txRut.getText().trim() + ",\n" +
                                        cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                        cbMes.getSelectedIndex()+ ",\n" +
                                        GrillaDescuentos.getValueAt(i,2).toString().trim()+ ",\n" +
                                        Math.round(result3)+ ","+
                                        GrillaDescuentos.getValueAt(i,3).toString().trim()+","+0+","+1+",'"+
                                        GrillaDescuentos.getValueAt(i,0).toString().trim()+"')");
                            
                            
                            
                      }else{
                        
                            Sql.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,porcentaje,dtrab,empresa) VALUES(\n" +
                                        txRut.getText().trim() + ",\n" +
                                        cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                        cbMes.getSelectedIndex()+ ",\n" +
                                        GrillaDescuentos.getValueAt(i,2).toString().trim()+ ",\n" +
                                        Math.round(result3)+ ","+
                                        GrillaDescuentos.getValueAt(i,3).toString().trim()+","+0+","+1+")");
                      }
                        
                        
                      if(GrillaDescuentos.getValueAt(i,2).toString().trim().equals("26")){    //SI ES LA CHILENA CONSOLIDADA (AUTORIZAR GASTO)
                      
                            ExeSql Sql2 = new ExeSql();
                            ResultSet Rs2 = null;
                            int tipopago = 2;
            
                            String Query2 = "SELECT * FROM prv_cuentasxpagar cxp \n" +
                                           "WHERE cxp.tipdocto IN ('FIN')\n" +
                                           "AND cxp.rut ='"+txRut.getText().trim()+"'";
                
                            try {
               
                                Rs2 = Sql2.Select(Query2);
                                
                                if (Sql2.GetRowCount() > 0){
                        
                                    JOptionPane.showMessageDialog(null,"El Gasto ya fue Autorizado!!");
                                    return;
                        
                                }
                 
                                Sql2.ExeSql("INSERT INTO prv_cuentasxpagar\n"
                                         + "(rut,tipdocto,nrodocto,fpago,monto,tipo,nrocuota,tipopago) \n"
                                         + "VALUES ("
                                         + txRut.getText().trim() + ",'"
                                         + "SCC',"
                                         + 0 + ",'"
                                         + dateFormat.format(hoy) + "',"
                                         + Math.round(result3) + ","
                                         + 0 +","
                                         + 1 +","
                                         + tipopago + ")");
                       
                                Sql2.Commit();
                        
                                JOptionPane.showMessageDialog(null,"Gasto Autorizado");
                    
                            }catch (SQLException | HeadlessException e) {
                    
                                    fmMain.Mensaje(e.getMessage());
                    
                                    Sql2.Rollback();
                   
                    
                            }finally{
                
                                Sql2.Close();
                            }
                      
                      }  
                       
                } 
            }
            
   //**************************************************** OTROS **********************************************************************//
            
            double ttrib2 = 0;
            double tdesc2 = 0;
            
            String sttrib = "";
            String sttrib2 = "";
            String stdesc = "";
            String stdesc2 = "";
            
            Rs = Sql.Select("SELECT * FROM psueldosdet WHERE rut='"+ txRut.getText().trim() +"' \n"+
                            "AND codigo IN (63,64,65,71,72,73,84,85,86)\n"+
                            "AND agno='"+ cbAgno.getSelectedItem().toString().trim() + "' \n"+
                            "AND mes='"+cbMes.getSelectedIndex()+"'");
            
           
           
            if (Sql.GetRowCount()==0){              //Se graban los descuentos con cargo al empleador de una nueva liquidacion
      
                double dcotiz,dcotiz2,dcotiz3,dcotizt = 0;             
                double mpor,mport = 0;
                              
                for (int c=63;c<87;c++){
               
                    if (c == 63){                     //SEGURO DE CESANTIA POR PARTE DEL EMPLEADOR
                       
                        if (tipocontrato.trim().equals("62")){                  
                       
                            if (!txRut.getText().trim().equals("5925941")){
                            
                               //mport = 0.024;  
                               mport = AFC2;
                            
                            }else if (txRut.getText().trim().equals("5925941")){
                            
                               mport = 0.0;
                            
                            }   
                       
                        }else if (tipocontrato.trim().equals("61")){
                           
                            if (!txRut.getText().trim().equals("5925941")){
                            
                               //mport = 0.030; 
                               mport = AFC1;
                               
                            }else if (txRut.getText().trim().equals("5925941")){
                             
                               mport = 0.0;  
                            
                            }
                            
                        }
                        
                        dcotiz = Precision.round(himponibleces*mport,4);
                        txCesantia.setText("$ "+formateador.format(dcotiz));
                        
                        mpor = mport*100;
                        jLabel5.setText(jLabel5.getText().trim() + " (" +mpor+ "%)");  
                        dcotizt = dcotiz; 
                         
                    }else if (c == 64){                 //SEGURO ACCIDENTE EN EL TRABAJO (MUTUAL)
                        
                        //mport = 0.0127;  
                        mport = MUTUAL;
                        
                        dcotiz2 = Precision.round(himponible*mport,4);
                        txMutual.setText("$ "+formateador.format(dcotiz2));
                       
                        mpor = mport*100;
                        jLabel4.setText(jLabel4.getText().trim() + " (" +Precision.round(mpor,2)+ "%)");  
                        dcotizt = dcotiz2;
                       
                    }else if (c == 65){                       //SEGURO DE INVALIDEZ Y SOBREVIVENCIA
                        
                        if (!txRut.getText().trim().equals("5925941")){
                        
                           // mport = 0.0199;  
                            mport = SIS;
                        
                        }else if (txRut.getText().trim().equals("5925941")){
                        
                            mport = 0.0;
                        }
                        
                        dcotiz3 = Precision.round(himponible*mport,4);
                        txSis.setText("$ "+formateador.format(dcotiz3));
                       
                        mpor = mport*100;
                        jLabel6.setText(jLabel6.getText().trim() + " (" +Precision.round(mpor,2)+ "%)");  
                        dcotizt = dcotiz3;
                       
                    }else if (c == 71){                       //TOTAL IMPONIBLE
                        
                        mport = 0;  
                        dcotizt = thaberim;
                       
                    }else if (c == 72){                       //TOTAL RENTAS VARIABLES
                        
                        mport = 0;
                        dcotizt = trenta_var;
                    
                    }else if (c == 73){                       //TOTAL RENTAS VARIABLES
                        
                        mport = 0;
                        dcotizt = topeimpces;                 //TOPE IMPONIBLE SEGURO CESANTIA
                          
                    }else if (c == 83){                       //TOPE IMPONIBLE
                        
                        mport = 0;
                        dcotizt = topeimp;           
                          
                    }else if (c == 84){                       //TOTAL TRIBUTABLE
                        
                        mport = 0;
                        
                        sttrib = txTotalTrib.getText().replaceAll("\\$","");
                        sttrib2 = sttrib.replaceAll("\\.","");
                        ttrib2 = Double.parseDouble(sttrib2.trim());
                        dcotizt = ttrib2;           
                          
                    }else if (c == 85){                       //TOTAL DESCUENTOS
                        
                        mport = 0;
                        
                        stdesc = txTotalDesc.getText().replaceAll("\\$","");
                        stdesc2 = stdesc.replaceAll("\\.","");
                        tdesc2 = Double.parseDouble(stdesc2.trim());
                        
                        dcotizt = tdesc2;           
                          
                    }else if (c == 86){                       //TOTAL LIQUIDO
                        
                        mport = 0;
                        
                       String result = txTotal.getText().toString().trim().replaceAll("\\$","");
                       String result2 = result.replaceAll("\\.","");
                       double dtotal = Double.parseDouble(result2.trim());
                        
                       dcotizt = dtotal;           
                        

                    }
                    
                    
                    if (c == 63 || c == 64 || c == 65 || c == 71 || c == 72 || c == 73 || c == 83  || c == 84 || c == 85 || c == 86){             
                     
                        Sql.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,porcentaje,dtrab,empresa) VALUES(\n" +
                                   txRut.getText().trim() + ",\n" +
                                   cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                   cbMes.getSelectedIndex()+ ",\n" +
                                   c + "," +  Math.round(dcotizt)+ ","+ mport +"," + 0 +","+ 1 + ")");
                    }
                }
               
                     
            }else if (Sql.GetRowCount() >0){     //se actualizan los descuentos con cargo al empleador de una liquidacion existente
                
                double dcotiz,dcotiz2,dcotiz3,dcotizt = 0; 
                    
                while (Rs.next()){
                               
                    if (Rs.getInt("codigo") == 63){                 //SEGURO DE CESANTIA POR PARTE DEL EMPLEADOR
                        
                        if (thaberim > topeimp){
                        
                           himponible = topeimp; 
                        
                        }else if (thaberim <= topeimp){
                        
                          himponible = thaberim; 
                        
                        }
                                              
                        if (thaberim > topeimpces){                             //Si el Haber imponible es mayor al tope imponible para cesantia
                        
                           himponibleces = topeimpces;                          //Entonces el Haber imponible de cesntia será igual al tope            
                        
                        }else if (thaberim <= topeimpces){                      //
                        
                          himponibleces = thaberim; 
                        
                        }
                        
                        dcotiz = Precision.round(himponibleces * Rs.getDouble("porcentaje"),4);
                        txCesantia.setText("$ "+formateador.format(dcotiz));
                        dcotizt = dcotiz;  
                        
                    }else if (Rs.getInt("codigo") == 64){           //SEGURO ACCIDENTE EN EL TRABAJO (MUTUAL)
                        
                              dcotiz2 = Precision.round(himponible * Rs.getDouble("porcentaje"),4);  
                              txMutual.setText("$ "+formateador.format(dcotiz2));
                              dcotizt = dcotiz2;
                        
                    }else if (Rs.getInt("codigo") == 65){           //SEGURO DE INVALIDEZ Y SOBREVIVENCIA
                              
                              dcotiz3 = Precision.round(himponible * Rs.getDouble("porcentaje"),4);
                              txSis.setText("$ "+formateador.format(dcotiz3));
                              dcotizt = dcotiz3;
                              
                    }else if (Rs.getInt("codigo") == 71){           //TOTAL IMPONIBLE
                           
                                dcotizt = thaberim;
                       
                    }else if (Rs.getInt("codigo") == 72){           //TOTAL RENTAS VARIABLES 
                           
                                dcotizt = trenta_var;
                       
                    }else if (Rs.getInt("codigo") == 73){           //TOTAL IMPONIBLE SEGURO CESANTIA
                           
                                dcotizt = topeimpces;              
                       
                    }else if (Rs.getInt("codigo") == 84){           //TOTAL TRIBUTABLE
                           
                                dcotizt = ttrib;              
                       
                    }else if (Rs.getInt("codigo") == 85){           //TOTAL DESCUENTOS
                           
                              dcotizt = tdesc;              
                       
                    }else if (Rs.getInt("codigo") == 86){           //TOTAL LIQUIDO
                           
                             String result = txTotal.getText().toString().trim().replaceAll("\\$","");
                             String result2 = result.replaceAll("\\.","");
                             double dtotal = Double.parseDouble(result2.trim());
                        
                             dcotizt = dtotal;           
                       
                    }
                    
                    
                    
                    Sql.ExeSql("UPDATE psueldosdet SET monto="+ Math.round(dcotizt)+ "\n"+
                               "WHERE rut='"+ txRut.getText().trim() +"' \n"+
                               "AND agno='" + cbAgno.getSelectedItem().toString().trim() + "' \n"+
                               "AND mes='"+cbMes.getSelectedIndex()+"' \n" +
                               "AND codigo="+Rs.getInt("codigo"));
                }
            }              
           
            Sql.Commit();
            fmMain.Mensaje("Liquidación de Sueldo guardada");
            SetEstados(3);
            
            btImprimir.setEnabled(true);
            btIr.setEnabled(true);
            btModifica.setEnabled(false);
            btEliminaDescuento.setEnabled(false);
            btEliminaHaber.setEnabled(false);
            
            cbDetalle.setEnabled(false);
            cbTipo.setEnabled(false);
            
            txMonto.setEnabled(false);
            txNombre.setEnabled(false);
            txDiasT.setEnabled(false);
            txRut.setEnabled(true);
            txRut.requestFocus();
             
            btConsolidado.doClick();
            
            
        }catch (NumberFormatException | SQLException e) {
            
            System.out.println(e.getMessage());   
            Sql.Rollback();   //deshace cambios (INSERT o UPDATE)
        
        }finally{
        
            Sql.Close();
            nuevo = 1;
        
        }
    }//GEN-LAST:event_btGuardarActionPerformed

    private void btLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiarActionPerformed
        autom = 1;
        Limpiar();
        
        Habilitar(false);
       
        btIr.setEnabled(true);
        btEditar.setEnabled(false);
        cbMes.setEnabled(false);
        cbAgno.setEnabled(false);
        
        lbNcargas.setText("");
        
        txRut.setEnabled(true);
        txNombre.setEnabled(false);
        txDiasT.setText("");
        
        nuevo    = 1;
        eligeAfp = 0;
        eligeFam = 6; 
        eligePres = 200;
        umes     = 0;
        thaberim = 0;
        thaber   = 0;
        tdesc    = 0;
        bmonto2 = 0;
      
        elmes    = ""; 
        uagno    = "";
        
        jLabel5.setText("SEGURO DE CESANTIA");
        jLabel4.setText("SEGURO ACCIDENTE DEL TRABAJO");
        jLabel6.setText("SEGURO DE INVALIDEZ Y SOBREVIVENCIA");
       
    }//GEN-LAST:event_btLimpiarActionPerformed

    private void txMontoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txMontoKeyTyped
        
        char car = evt.getKeyChar();
        
        if (car=='.'){   
           
           char x;
           int conta=0;
           
           for (int y=0; y < txMonto.getText().length(); y++ ){
                        
                x = txMonto.getText().charAt(y);
                 
                if (x=='.'){
                   conta++;
                }
                
                if (conta==1){
                    evt.consume(); 
                }
           }
        }
            
        if(((car<'0') || (car>'9')) && ((car<'.') || (car>'.'))){
           evt.consume(); 
        }        
    }//GEN-LAST:event_txMontoKeyTyped

    private void txMontoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txMontoKeyReleased
        
        char car = evt.getKeyChar();
         
        if (car=='.'){   
            
            char x;
            
            for (int y = 0; y < txMonto.getText().length(); y++ ){
                
                x = txMonto.getText().charAt(y);
                
                if (y==0 && x=='.'){
                    
                   txMonto.setText("0.");
                }
                        
            }
        }
            
    }//GEN-LAST:event_txMontoKeyReleased

   
    private void btEliminaHaberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminaHaberActionPerformed
         
        double dhaber = 0;
        codigoHaber   = "";
        nombreHaber   = "";
        
        DefaultTableModel Model1 = (DefaultTableModel) GrillaHaberes.getModel();
        
        if(fmMain.OkCancel("Eliminar Haber " + GrillaHaberes.getValueAt(GrillaHaberes.getSelectedRow(),0).toString().trim()) == JOptionPane.OK_OPTION){
        
            String cod = GrillaHaberes.getValueAt(GrillaHaberes.getSelectedRow(), 2).toString().trim();          
            String result = GrillaHaberes.getValueAt(GrillaHaberes.getSelectedRow(), 1).toString().trim().replaceAll("\\$","");
            String result2 = result.replaceAll("\\.","");
            dhaber = Double.parseDouble(result2);
                       
            if (!cod.equals("2") && !cod.equals("3") && !cod.equals("6") && !cod.equals("7")  && !cod.equals("29")  && !cod.equals("32")){    //QUE SEAN IMPONIBLES
                
                
                if (cod.equals("4") || cod.equals("9") || cod.equals("10") ||                               //QUE SEAN RENTAS VARIABLES
                    cod.equals("11") || cod.equals("28") || cod.equals("36") ||
                    cod.equals("37") || cod.equals("38") || cod.equals("39") ||                             
                    cod.equals("75") || cod.equals("76") ){
                    
                    tsem_corr = tsem_corr - dhaber;
                    trenta_var = trenta_var - dhaber;
                    csemana.setText(String.valueOf(tsem_corr));
                }
                
                
                thaberim = thaberim - dhaber;
                
                
                Recalc = true;
                Recalc2 = true;
                
            }else{
            
                Recalc = false;
                Recalc2 = false;
            }  
            
            
            if (cod.equals("6")){          //ASIGNACION FAMILIAR
            
               lbTramo.setText("D");
            
            }
            
            
            if (cod.equals("1")){
                          
                eligeGratf = 100;                        //si se elimina Gratificación, se activa para que se vuelva a agregar.
                
            }  
            
            if (cod.equals("8")){                       //si se elimina Semana corrida, se activa para que se vuelva a agregar
            
                trenta_var = trenta_var - dhaber;
               
                eligeSem = 8;
                
                semana = false;
               
                csemana.setText(String.valueOf(tsem_corr));
                
            
            }
            
            
            if (cod.equals("35")){                       //DIFERENCIA PAGO HORAS EXTRAS 
            
                trenta_var = trenta_var - dhaber;
            }
            
            
            if (cod.equals("6")){                       //si se elimina Asignación Familiar, se activa para que se vuelva a agregar
           
                eligeFam = 6;
            
            }
                        
            thaber = thaber - dhaber;
        
            Model1.removeRow(GrillaHaberes.getSelectedRow());
            
            
 //************************************************ REACTUALIZA Y RECALCULA GRILLA HABERES ***********************************************//
                    
            RecalGratif(Recalc);
            
 //************************************************************* RECALCULA DESCUENTOS ***************************************************//                        
            RecalDesc(Recalc2);
                
 //***************************************************************************************************************************************************************//               
           
 //************************************** CALCULA DESCUENTOS EMPLEADOR *****************************************///          
            double dcotiz = 0; 
             
            if (!cod.equals("2") && !cod.equals("3") && !cod.equals("6") && !cod.equals("7")  && !cod.equals("29")  && !cod.equals("32")){ 
            
                if (tipocontrato.trim().equals("62")){                              //CONTRATO INDEFINIDO
            
                    if (!txRut.getText().trim().equals("5925941")){
                    
                       // dcotiz = Precision.round(himponibleces*0.024,4);  
                        dcotiz = Precision.round(himponibleces*AFC2,4);  
                    
                    }else if (txRut.getText().trim().equals("5925941")){
                    
                        dcotiz = 0;
                    
                    }
                        
                }else if (tipocontrato.trim().equals("61")){                        //CONTRATO FIJO
                     
                     if (!txRut.getText().trim().equals("5925941")){
                     
                         //dcotiz = Precision.round(himponibleces*0.030,0); 
                         dcotiz = Precision.round(himponibleces*AFC1,0); 
                     
                     }else if (txRut.getText().trim().equals("5925941")) {
                     
                         dcotiz = 0;
                     
                     }
                        
                }
                txCesantia.setText("$ "+formateador.format(dcotiz));
   
    //*****************************************************************************************            
              //  dcotiz = Precision.round(himponible*0.0127,4);                      //SEGURO DE ACCIDENTE EN EL TRABAJO
                dcotiz = Precision.round(himponible*MUTUAL,4);
                
                txMutual.setText("$ "+formateador.format(dcotiz));
                
     //*****************************************************************************************           
                
                if (!txRut.getText().trim().equals("5925941")){
                
                 //   dcotiz = Precision.round(himponible*0.0199,4);                  //SEGURO DE INVALIDEZ Y SOBREVIVENCIA
                    dcotiz = Precision.round(himponible*SIS,4);
                    
                }else if (txRut.getText().trim().equals("5925941")){
                
                    dcotiz = 0;
                
                }
                 
                txSis.setText("$ "+formateador.format(dcotiz));
            } 
       //********************************** BORRA REGISTRO DE LA TABLA ************************************************************     
           
           ExeSql Sql = new ExeSql();
           
           try{
                Sql.ExeSql("DELETE FROM psueldosdet WHERE rut='"+txRut.getText().trim()+"' \n"+
                           "AND agno='"+cbAgno.getSelectedItem().toString().trim()+"' \n"+
                           "AND mes='"+cbMes.getSelectedIndex()+"' \n"+
                           "AND codigo='"+cod+"'");
                
           }catch (SQLException ex) {
               
               Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
           }
            
        }    
    }//GEN-LAST:event_btEliminaHaberActionPerformed

    
    private void btEliminaDescuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminaDescuentoActionPerformed
        
        double ddesc  = 0;
         
        if(fmMain.OkCancel("Eliminar Descuento " + GrillaDescuentos.getValueAt(GrillaDescuentos.getSelectedRow(),0).toString().trim()) == JOptionPane.OK_OPTION){
                       
            String nom = GrillaDescuentos.getValueAt(GrillaDescuentos.getSelectedRow(), 0).toString().trim();
            String cod = GrillaDescuentos.getValueAt(GrillaDescuentos.getSelectedRow(), 2).toString().trim();
            String result = GrillaDescuentos.getValueAt(GrillaDescuentos.getSelectedRow(), 1).toString().trim().replaceAll("\\$","");
            String result2 = result.replaceAll("\\.","");
            ddesc = Double.parseDouble(result2);
            
           
            if (nom.contains("AFP")){
               eligeAfp = 0;
            }
            
            if (cod.equals("5")){
               eligeFonasa = 5;
               eligeIsapre = 501;
            }
            
                            
            if (cod.equals("17") || cod.equals("24") || cod.equals("34") || cod.equals("42") || cod.equals("43") || cod.equals("44")){
            
                eligeIsapre = 501;
                eligeFonasa = 5;
            }
            
            if (cod.equals("13")){
               
                eligeCotiz = 130; 
               
            }
            
            if (cod.equals("14")){
                
               eligeCesan = 140; 
            }
            
            if (cod.equals("19")){
                
               eligeImp = 190; 
               Iunico = false;
            }
            
            tdesc = tdesc - ddesc;
            
            DefaultTableModel tbMd = (DefaultTableModel) GrillaDescuentos.getModel();
            tbMd.removeRow(GrillaDescuentos.getSelectedRow());
            
            Recalc2 = true;
            
            RecalDesc(Recalc2);
            
          //********************************** BORRA REGISTRO DE LA TABLA ************************************************************     
            
            ExeSql Sql = new ExeSql();
           
            try{
                Sql.ExeSql("DELETE FROM psueldosdet WHERE rut='"+ txRut.getText().trim() +"' \n"+
                           "AND agno='"+cbAgno.getSelectedItem().toString().trim()+ "' \n" +
                           "AND mes='"+cbMes.getSelectedIndex() + " '\n" +
                           "AND codigo='"+cod+"'");
            
            }catch (SQLException ex) {
                Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
         
    }//GEN-LAST:event_btEliminaDescuentoActionPerformed

    private void btEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarActionPerformed
        
        if (Estado){
           
           SetEstados(4);
           btImprimir.setEnabled(false);
           Iunico = false;   
        
        }else {
        
           fmMain.Mensaje("El Mes está Cerrado ");
        
        }
    }//GEN-LAST:event_btEditarActionPerformed

    private void cbAgnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAgnoActionPerformed
        
        if (autom == 0){
           
           if (EstadoGeneral==3) {
               
              AbrirRemuneracion(1);
           
           }
        
        }else{
           
            autom = 0;
        }
    }//GEN-LAST:event_cbAgnoActionPerformed

    private void cbMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMesActionPerformed
        
        if (autom == 0){
            
            if (EstadoGeneral==3 ){
            
                AbrirRemuneracion(1);
            }
        
        }else{
        
            autom = 0;
        }
    }//GEN-LAST:event_cbMesActionPerformed

    private void txMontoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txMontoKeyPressed
       
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            
           btAgregar.doClick();
        }
    }//GEN-LAST:event_txMontoKeyPressed

    private void txTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txTotalActionPerformed

    
    private void btModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btModificaActionPerformed
        
        String result  = "";
        String result2 = "";
        String cod, valor = "";
        
        double dhaber   = 0;
        double vdtrab   = 0;
        
        for(int i=0; i< GrillaHaberes.getRowCount();i++){                                                      //se recalcula el haber imponible en base
                                                                                                               //a la cantidad de dias trabajados ingresados
            valor = GrillaHaberes.getValueAt(i,1).toString().trim();
            cod = GrillaHaberes.getValueAt(i,2).toString().trim();                                                          
            
            if (cod.equals("0") || cod.equals("2") || cod.equals("3") ){                                                  
               
                result = valor.replaceAll("\\$","");      
                result2 = result.replaceAll("\\.","");       
                dhaber = Double.parseDouble(result2);     
                
                thaber = thaber - dhaber;
                
                
                if (cod.equals("0")){  
                
                 thaberim = thaberim - dhaber;
                
                }   
                
                vdtrab =  Double.parseDouble(txDiasT.getText().trim());    
              
                if (cod.equals("0")){  
                
                        dhaber =  Math.floor(vdtrab * valordia);                                                     //se multiplica numero de días * valor día    
                
                }else if (cod.equals("2") || cod.equals("3")){
                
                        dhaber =  Math.floor(vdtrab * valordia2);                                                     //se multiplica numero de días * valor día    
                
                }
                
             
                GrillaHaberes.setValueAt("$ "+formateador.format(dhaber), i,1);                              //se asigna nuevo sueldo base a la grilla
 
                thaber = thaber + dhaber;
                
                if (cod.equals("0")){  
                
                    thaberim = thaberim + dhaber;
                }
                             
            }
            
        }
       
       
        RecalGratif(true);                    //Se recalcula la gratificación
        RecalDesc(true);                          //Se recalcula los descuentos
        
        
        //**************************************** CALCULA COTIZACIONES DEL EMPLEADOR **************************************//     
        double dcotiz = 0; 
        
        if (tipocontrato.trim().equals("62")){                                  //CONTRATO INDEFINIDO
            
            
            if (!txRut.getText().trim().equals("5925941")){
            
              //  dcotiz = Precision.round(thaberim*0.024,4);
                dcotiz = Precision.round(thaberim*AFC2,4);
                
            }else if (txRut.getText().trim().equals("5925941")){
            
                dcotiz = 0;
            
            }
                        
        }else if (tipocontrato.trim().equals("61")){                            //CONTRATO FIJO
            
            if (!txRut.getText().trim().equals("5925941")){
            
              // dcotiz = Precision.round(thaberim*0.030,0); 
               dcotiz = Precision.round(thaberim*AFC1,0); 
            
            }else if (txRut.getText().trim().equals("5925941")){
   
               dcotiz = 0;    
                
            }
            
        }
                
        txCesantia.setText("$ "+formateador.format(dcotiz));
  //***************************************************************************      
        
    //    dcotiz = Precision.round(thaberim*0.0127,4);                            //SEGURO DE ACCIDENTE EN EL TRABAJO
        dcotiz = Precision.round(thaberim*MUTUAL,4);
        
        txMutual.setText("$ "+formateador.format(dcotiz));
        
    //**************************************************************************    
        
         if (!txRut.getText().trim().equals("5925941")){
        
       //    dcotiz = Precision.round(thaberim*0.0199,4);                            //SEGURO DE INVALIDEZ Y SOBREVIVENCIA 
           dcotiz = Precision.round(thaberim*SIS,4);
           
         }else if (txRut.getText().trim().equals("5925941")) {
         
            dcotiz = 0;
         }
        
        
        txSis.setText("$ "+formateador.format(dcotiz));
       
    }//GEN-LAST:event_btModificaActionPerformed

    private void btImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImprimirActionPerformed
                
       ImprimeLiquidacion();
        
    }//GEN-LAST:event_btImprimirActionPerformed

    private void txTotalHaberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txTotalHaberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txTotalHaberActionPerformed

    private void txTotalDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txTotalDescActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txTotalDescActionPerformed

    private void txDiasTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txDiasTActionPerformed
       
        btModifica.doClick();
        
    }//GEN-LAST:event_txDiasTActionPerformed

    private void cbDetalleIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDetalleIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbDetalleIdActionPerformed

    private void btConsolidadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsolidadoActionPerformed

        
        ExeSql Sql = new ExeSql();
        ExeSql Sql2 = new ExeSql();
        ResultSet Rs;
        
        String tpag = txTotal.getText().replaceAll("\\$","");
        String tpag2 = tpag.trim().replaceAll("\\.","");
        double tpagar = Double.parseDouble(tpag2.trim());
        
        String tces = txCesantia.getText().replaceAll("\\$","");
        String tces2 = tces.trim().replaceAll("\\.","");
        double tcesantia = Double.parseDouble(tces2.trim());
        
        String tmut = txMutual.getText().replaceAll("\\$","");
        String tmut2 = tmut.trim().replaceAll("\\.","");
        double tmutual = Double.parseDouble(tmut2.trim());
        
        String tsis = txSis.getText().replaceAll("\\$","");
        String tsis2 = tsis.trim().replaceAll("\\.","");
        double tSis = Double.parseDouble(tsis2.trim());
        
        try{
            
            Rs = Sql.Select("SELECT * FROM psueldos WHERE rut='"+ txRut.getText().trim() +"' \n"+
                            "AND agno = "+cbAgno.getSelectedItem().toString().trim() + "\n" +
                            "AND mes = "+cbMes.getSelectedIndex());
                        
                         
            if (Sql.GetRowCount() > 0){                                     
            
                 Sql.ExeSql("DELETE FROM psueldos WHERE rut='"+txRut.getText().trim()+"' \n"+
                            "AND agno = "+cbAgno.getSelectedItem().toString().trim()+" \n"+
                            "AND mes = "+cbMes.getSelectedIndex());

            }
            
            Sql2.ExeSql("INSERT INTO psueldos (rut, agno, mes, totalhaberes, totaldescuentos, totalmutual, totalcesantia, totalsis, totalapagar) \n"+
                        "VALUES(" + txRut.getText().trim() + ",\n" +
                        cbAgno.getSelectedItem().toString().trim() + ",\n" +
                        cbMes.getSelectedIndex()+ ",\n" +
                        thaber+ ",\n" +
                        tdesc+ ",\n" +
                        tmutual+ ",\n" +
                        tcesantia+ ",\n" +
                        tSis+",\n" +
                        tpagar+")");
            
//            fmMain.Mensaje("Liquidacion consolidada exitosamente");
            Sql2.Commit();
            Sql2.Close();
        }catch (SQLException ex) {
           
            Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
            fmMain.Mensaje("Error consolidación!!");
        }
        
    }//GEN-LAST:event_btConsolidadoActionPerformed

    private void txRutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txRutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txRutActionPerformed

    private void txDiafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txDiafActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txDiafActionPerformed

    private void txLicenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txLicenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txLicenciaActionPerformed

    private void txInasistenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txInasistenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txInasistenciaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        try {
            ExeSql Sql = new ExeSql();
            ExeSql Sql2 = new ExeSql();
            ResultSet Rs, Rs2;
            
            Rs = Sql.Select("SELECT * FROM psueldosdet WHERE rut='"+ txRut.getText().trim() +"'\n"+
                    "AND agno='"+ cbAgno.getSelectedItem().toString().trim() + "'\n" +
                    "AND mes='"+cbMes.getSelectedIndex()+"'");
            
            if (Sql.GetRowCount()>0){   //se guardan los haberes de una liquidación que ya existe
                
                Rs.next();
                
                String result = txTotalDesc.getText().trim().replaceAll("\\$","");  
                String result2 = result.replaceAll("\\.","");
                double txtrib = Double.parseDouble(result2.trim());         
                
                String result1 = txTotal.getText().trim().replaceAll("\\$","");  
                String result3 = result1.replaceAll("\\.","");
                double txtrib2 = Double.parseDouble(result3.trim());         
                
                
                
                Sql.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,empresa) VALUES(\n" +
                                       txRut.getText().trim() + ",\n" +
                                       cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                       cbMes.getSelectedIndex()+ ",\n" +
                                       "'85',\n" +
                                       Math.round(txtrib)+ ",\n" +
                                       1+")");
                
                Sql.Commit();
                
                
                Sql2.ExeSql("INSERT INTO psueldosdet (rut, agno, mes, codigo, monto,empresa) VALUES(\n" +
                                       txRut.getText().trim() + ",\n" +
                                       cbAgno.getSelectedItem().toString().trim() + ",\n" +
                                       cbMes.getSelectedIndex()+ ",\n" +
                                       "'86',\n" +
                                       Math.round(txtrib2)+ ",\n" +
                                       1+")");
                
                Sql2.Commit();
                
                
                fmMain.Mensaje("Items actualizados!!");
                
                
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void AbrirRemuneracion(int cr){
       
        double totalr  = 0;
        double dhaber  = 0;
        double dsem    = 0;
      
        int codigo_bono = 0;
        
        String rut     = txRut.getText().trim();
        String gratcod = "0";
        String gratnom = "";
         
        eligeAfp     = 0;
        eligeCesan   = 140;
        eligeCotiz   = 130;
        eligeFonasa  = 5;
        eligeIsapre  = 501; 
        eligeImp     = 190;
        eligeSem     = 8;
        
        lbEstado.setText("");
        lbTramo.setText("D");
       
        thaberim        = 0;
        himponible      = 0;
        himponibleces   = 0;
        thaber          = 0;
        tdesc           = 0;
        dtrib           = 0;
        ttrib           = 0;
        tsem_corr       = 0;
        trenta_var      = 0;
        elmes           = String.valueOf(cbMes.getSelectedIndex());
        
        ExeSql Sql   = new ExeSql();
        ExeSql Sql1  = new ExeSql();    
        ExeSql Sql2  = new ExeSql();    
        ExeSql Sql3  = new ExeSql();
        ExeSql Sql4  = new ExeSql();
        ExeSql Sql5  = new ExeSql();
        
        ResultSet Rs;
        ResultSet Rs1;
        ResultSet Rs2;
        ResultSet Rs3;
        ResultSet Rs4;
        ResultSet Rs5;
        
        DefaultTableModel ModelH = (DefaultTableModel) GrillaHaberes.getModel();
        DefaultTableModel ModelD = (DefaultTableModel) GrillaDescuentos.getModel();
        
        fmMain.LimpiaGrilla(ModelD);
        fmMain.LimpiaGrilla(ModelH);
        
        try{
                if (nuevo == 0){    // si es un nuevo registro  
                    
                    String dnombre = "";
                    
                    Rs3 = Sql3.Select("SELECT pg.nombre, ph.valor, ph.codigo,ph.vdtrab,ph.cod_bono\n" +
                                      "FROM personalhd ph \n" +
                                      "LEFT JOIN par_general pg ON ph.codigo=pg.codigo\n" +
                                      "WHERE ph.rut="+ rut + " AND pg.tipo IN ('REM_HABERES') ORDER BY ph.codigo ASC");
                                       
                    while(Rs3.next()){
                        
                        dhaber = Rs3.getDouble("valor"); 
                         
                        if  (!Rs3.getString("codigo").equals("1") && !Rs3.getString("codigo").equals("2") && !Rs3.getString("codigo").equals("3")       // HABERES IMPONIBLES
                            && !Rs3.getString("codigo").equals("6") && !Rs3.getString("codigo").equals("7") && !Rs3.getString("codigo").equals("29") 
                            && !Rs3.getString("codigo").equals("32")){
                            
                            if (Rs3.getString("codigo").equals("0")){ 
                                
                               valordia = Rs3.getDouble("vdtrab");              
                            }
                            
                            if (Rs3.getString("codigo").equals("4")  || Rs3.getString("codigo").equals("9")  ||             //RENTAS VARIABLES
                                Rs3.getString("codigo").equals("10") || Rs3.getString("codigo").equals("11") ||
                                Rs3.getString("codigo").equals("28") || Rs3.getString("codigo").equals("36") ||
                                Rs3.getString("codigo").equals("37") || Rs3.getString("codigo").equals("38") ||
                                Rs3.getString("codigo").equals("39") || Rs3.getString("codigo").equals("75") ||
                                Rs3.getString("codigo").equals("76") ){ 
                                
                                int codigo = Integer.parseInt(Rs3.getString("codigo"));
                                codigo_bono = Integer.parseInt(Rs3.getString("cod_bono"));
                                String Agno = y;            //Se recoje el año actual como texto
                                int Mes = m-1;              //Se recoje el mes actual como entero
                                
                                
                                dcant = Integer.parseInt(txDiah.getText());             //dias trabajados 
                                dcant2 = Integer.parseInt(txDiaf.getText());          //domingos y festivos
                                
                                jdBuscaBonosyComisiones ByC = new jdBuscaBonosyComisiones(codigo,codigo_bono,Agno,Mes,dcant,dcant2);   //Se calcula semana corrida por cada renta variable
                             
                                dhaber = ByC.GetCom();
                                dsem = ByC.GetSem();
                                
                                if (dhaber <= 0){
                                
                                    dhaber = 0;
                                
                                }
                                
                                if (dsem <= 0){
                                
                                    dsem = 0;
                                
                                }
                                
                                tsem_corr = tsem_corr + dsem;
                                trenta_var = trenta_var + dhaber;
                                
                            }
                            
                            
                            if (Rs3.getString("codigo").equals("8")){                   //SEMANA CORRIDA
                                
                                dhaber = tsem_corr;
                                trenta_var = trenta_var + dhaber;
                                semana = true;
                               
                            }
      
                            
                            if (Rs3.getString("codigo").equals("35")){                   //DIFERENCIA PAGO HORAS EXTGRAS
                               
                               trenta_var = trenta_var + dhaber;
                               
                            }
                            
                            thaberim = thaberim + dhaber;                       

                            
                        }
                        
                        
                        //********************************************************************************************************************************************                      
                            
                            if (Rs3.getString("codigo").equals("2") || Rs3.getString("codigo").equals("3") ){      //COLACION y MOVILIZACION
                                
                               valordia2 = Rs3.getDouble("vdtrab");              
                            }
                        
                        
                            if (Rs3.getString("codigo").equals("6")){                  //ASIGNACION FAMILIAR
                                
                                if (!lbNcargas.getText().equals("0")){          //Si existen cargas familiares
                                    
                                    if (m > 6){             //Si el mes de pago es entre Julio y Diciembre
                                                            //Se calcula la asignación familiar según el periodo de Enero-Junio del año en curso
                                        try{   
                       
                                                Rs = Sql.Select("SELECT SUM (monto) AS totimp FROM psueldosdet WHERE rut='" + txRut.getText().trim() +"' \n" +
                                                                "AND codigo = '71' \n" +
                                                                "AND agno='" + y + "' \n" +
                                                                "AND mes IN (1,2,3,4,5,6)");
                        
                                                Rs.next();
                       
                                                double timp = Math.round(Rs.getDouble("totimp")/6);
                        
                                                if (timp > afamilia.GetRango4()){
                    
                                                   fmMain.Mensaje("Al trabajador no le correspónde Asignación Familiar");
                                                   eligeFam = -6;
                                                   txMonto.setText("");
                                                   lbTramo.setText("D");
                            
                                                   return;
                                                }
                         
                                                dhaber = afamilia.compara(timp) * Integer.parseInt(lbNcargas.getText());
                        
                                                lbTramo.setText(afamilia.GetTramo());
                        
                                        }catch (SQLException ex) {
                        
                                                Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
                    
                                        }
                 
                                    }else if (m <= 6){         //Si el mes de pago es entre Enero y Junio
                                                               //Se calcula la asignación familiar según el periodo de Enero-Junio del año anterior
                   
                                        try{   
                                                int year2 = year-1;                                               
                                                Rs = Sql.Select("SELECT SUM (monto) AS totimp FROM psueldosdet WHERE rut='" + txRut.getText().trim() +"' \n" +
                                                                "AND codigo = '71' \n" +
                                                                "AND agno='" + year2 + "' \n" +
                                                                "AND mes IN (1,2,3,4,5,6)");
                        
                                                Rs.next();
                       
                                                double timp = Math.round(Rs.getDouble("totimp")/6);
                        
                                                if (timp > afamilia.GetRango4()){
                    
                                                   fmMain.Mensaje("Al trabajador no le correspónde Asignación Familiar");
                                                   eligeFam = -6;
                                                   txMonto.setText("");
                                                   lbTramo.setText("D");
                            
                                                   return;
                                                }
                         
                                                dhaber = afamilia.compara(timp) * Integer.parseInt(lbNcargas.getText());
                        
                                                lbTramo.setText(afamilia.GetTramo());
                        
                                        }catch (SQLException ex) {
                        
                                                Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
                    
                                        }       
                 
                                    }
               
                                }    
             
                            }
                            
                            
      //**********************************************************************************************************************************************                      
        
                            topeimpces = Math.round(ind.GetTopeCesantia());
                        
                            topeimp = Math.round(ind.GetMaximp());
                        
                            thaber = thaber + dhaber;
                                
                            if (Rs3.getString("codigo").equals("1")){ 
                        
                                gratcod = Rs3.getString("codigo").trim();
                                gratnom = Rs3.getString("nombre").trim();
                        
                            }else{
                            
                                if (dhaber > 0){ 
                          
                                    String vhaber = "$ "+formateador.format(dhaber);
                                    ModelH.addRow(new Object[]{Rs3.getString("nombre").trim(),vhaber,Rs3.getString("codigo").trim(),codigo_bono});
                           
                                }
                            }   
                    }  
                   
                    
         //************************** CALCULA GRATIFICACION AL CREAR UN NUEVO REGISTRO *****************//         
                    
                    if (gratcod.trim().equals("1")){
                                                                
                       dhaber = Math.round(thaberim * 0.25);
                                                 
                       if (dhaber > Math.round(gratf.GetGratif())){             //Se verifica si la Gratificaciín es mayor al tope
                         
                           dhaber = Math.round(gratf.GetGratif());                 
                       }
                       
                       thaberim = thaberim + dhaber;
                       
                       thaber = thaber + dhaber;
                        
                       String vhaber2 = "$ "+formateador.format(dhaber);
                       
                       ModelH.addRow(new Object[]{gratnom,vhaber2,gratcod,0});      
                       
                    }
                    
                    csemana.setText(String.valueOf(tsem_corr));
                    
                    
                    if (thaberim > topeimp){
                    
                        himponible = topeimp;
                    
                    }else{
                    
                       himponible = thaberim;
                       
                    }
                       
                    if (thaberim > topeimpces){
                        
                       himponibleces = topeimpces; 
                        
                    }else{
                       
                       himponibleces = thaberim;  
                    
                    }
                    
 //*************************************** DESCUENTOS **************************************************************//      
                    Rs3 = Sql3.Select("SELECT pg.nombre, ph.valor, ph.codigo, ph.porcentaje\n" +
                                      "FROM personalhd ph \n" +
                                      "LEFT JOIN par_general pg ON ph.codigo=pg.codigo \n" +
                                      "WHERE ph.rut="+ rut +" AND pg.tipo IN ('REM_DESCUENTOS')");
                    
                    while(Rs3.next()){
                        
                         double ddesc = 0;
                         double topeApv = 0;
                         adcIsapre = true;
                         prestamo = false;
                         
                        if (Rs3.getString("codigo").equals("5")){                    //FONASA
                            
                            tieneIsapre = false;
                            fonasadesc = Precision.round(himponible*Rs3.getDouble("porcentaje"),0);
                            ddesc = fonasadesc; 
                            dtrib = dtrib + ddesc;
                            dnombre = Rs3.getString("nombre").trim() + " (7%)";
                            eligeFonasa = -5;
                               
                        }else if (Rs3.getString("codigo").equals("13")){            //AFP OBLIGATORIO
                         
                            ddesc = Precision.round(himponible*Rs3.getDouble("porcentaje"),0);
                            dnombre = Rs3.getString("nombre").trim() + " (10%)";
                            dtrib = dtrib + ddesc;
                         
                        }else if (Rs3.getString("codigo").equals("25")){            //APV A
                             
                             ddesc = Double.parseDouble(Rs3.getString("valor").trim()); 
                             dnombre = Rs3.getString("nombre").trim();
                             topeApv = Precision.round(ind.GetTopeApvM() * ind.GetUfIsapre(),0);
                             
                             if (ddesc > (ind.GetTopeApvM() * ind.GetUfIsapre())){
                             
                                 ddesc = (ind.GetTopeApvM() * ind.GetUfIsapre());
                             }
                         
                        }else if (Rs3.getString("codigo").equals("33")){            //APV B
                             
                             ddesc = Double.parseDouble(Rs3.getString("valor").trim()); 
                             dnombre = Rs3.getString("nombre").trim();
                             topeApv = Precision.round(ind.GetTopeApvM() * ind.GetUfIsapre(),0);
                             
                             if (ddesc > (ind.GetTopeApvM() * ind.GetUfIsapre())){
                             
                                 ddesc = (ind.GetTopeApvM() * ind.GetUfIsapre());
                             }
//                             dtrib = dtrib + ddesc;
                         
                        }else if (Rs3.getString("codigo").equals("74")){            //CUENTA AHORRO PREVISIONAL
                             
                             ddesc = Double.parseDouble(Rs3.getString("valor").trim()); 
                             dnombre = Rs3.getString("nombre").trim();
                             
//                             dtrib = dtrib + ddesc;
                         
                        }else if (Rs3.getString("codigo").equals("14")){             //SEGURO CESANTIA
                             
                            ddesc = Precision.round(himponibleces*Rs3.getDouble("porcentaje"),4);
                            double mpor = Rs3.getDouble("porcentaje")*100;
                            //dnombre = Rs3.getString("nombre").trim() + " (0,6%)";
                            dnombre = Rs3.getString("nombre").trim() + " ("+Precision.round(mpor,2)+"%)";
                          
                            
                            dtrib = dtrib + ddesc;
                         
                        }else if (Rs3.getString("nombre").contains("AFP")){                   //AFP COMISION
                            
                            ddesc = Precision.round(himponible*Rs3.getDouble("porcentaje"),4);
                            double mpor = Rs3.getDouble("porcentaje")*100;
                            dnombre = Rs3.getString("nombre").trim() + " (" +Precision.round(mpor,2)+ "%)";
                            eligeAfp = 1;
                            dtrib = dtrib + ddesc; 
                            
                        }else if (Rs3.getString("codigo").equals("17") || Rs3.getString("codigo").equals("24") || Rs3.getString("codigo").equals("34") || //ISAPRE OBLIGATORIO
                                  Rs3.getString("codigo").equals("42") || Rs3.getString("codigo").equals("43") || Rs3.getString("codigo").equals("44")){
                                   
                                   tieneIsapre = true;
                                   
                                   ddesc = Precision.round(himponible*Rs3.getDouble("porcentaje"),4);
                                   
                                   cubreIsapre = ddesc;
                                   
                                   double mpor = Rs3.getDouble("porcentaje")*100;
                                   dnombre = Rs3.getString("nombre").trim() + " (" +Math.round(mpor)+ "%)";
                                   dtrib = dtrib + ddesc;
                                
                        }else if (Rs3.getString("codigo").equals("18")){             //ADICIONAL ISAPRE
                             
                            if (tieneIsapre){           //Si se ingresó una ISAPRE
                            
                                double planIsapre = ind.GetUfIsapre()*Rs3.getDouble("porcentaje");
                            
                                if(planIsapre <= cubreIsapre){     //Si el Plan de ISAPRE lo cubre el 7%
                          
                                   adcIsapre = false;                           //No existe descuento "ADICIONAL ISAPRE"
                                
                                }else{                                          //Si el Plan de ISAPRE no lo cubre el 7 %
                                    
                                   ddesc = planIsapre - cubreIsapre;            //Se calcula la diferencia
                                   adcIsapre = true;                            //Existe el descuento "ADICIONAL ISPARE" (diferencia)    
                                   dnombre = Rs3.getString("nombre").trim();
                                   
                                   dtrib = dtrib + ddesc;                       
                                }
                                
                            }else{
                            
                                adcIsapre = false;
                            }
                         
                        }else if (Rs3.getString("codigo").equals("20")){             //PRESTAMO EMPRESA
                             
                                try {
                        
                                    Rs4 = Sql4.Select("SELECT * FROM personal_plhx \n"+
                                                      "WHERE rut=" + txRut.getText().trim() + "\n" +
                                                      "AND tipo = 5 \n" +
                                                      "AND EXTRACT(YEAR FROM dfecha) <= "+iagno + "\n"+
                                                      "AND (EXTRACT(MONTH FROM dfecha)>= "+(imes+1) + " OR EXTRACT(MONTH FROM dfecha)<= "+(imes+1) + ")\n"+ 
                                                      "AND EXTRACT(YEAR FROM hfecha) >= "+iagno + "\n"+
                                                      "AND (EXTRACT(MONTH FROM hfecha)>= "+(imes+1) + " OR EXTRACT(MONTH FROM hfecha)<= "+(imes+1) + ")\n"+  
                                                      "ORDER BY dfecha ASC");
                      
                                    if (Sql4.GetRowCount() == 0){     
                                       
                                        prestamo = false;  
                                        adcIsapre = false;
                                        txMonto.setText("");
                                      
                                    }else if (Sql4.GetRowCount() > 0){             
                                        
                                        prestamo = true;
                                        adcIsapre = false;
                                        
                                        Rs4.next();
                        
                                        Date fechad = new Date();
                                        Date fechah = new Date();
                          
                          
                                        fechad = Rs4.getDate("dfecha");
                                        fechah = Rs4.getDate("hfecha");
                          
                                        cal2.setTime(hoy);
                                        cal3.setTime(fechad);
                                        cal4.setTime(fechah);
                          
                                        int ames = cal2.get(Calendar.MONTH)+1; 
                                        int dmes = cal3.get(Calendar.MONTH)+1;                          
                                        int hmes = cal4.get(Calendar.MONTH)+1;   
                        
                                        int adif1 = cal4.get(Calendar.YEAR) - cal3.get(Calendar.YEAR);      //Se calcula el numero total de Cu8tas
                                        tCuotas = (adif1 * 12 + hmes - dmes)+1;
                          
                                        int adif2 = cal2.get(Calendar.YEAR) - cal3.get(Calendar.YEAR); 
                                        cMes = (adif2 * 12 + ames - dmes)+1;  

                                        dnombre = Rs3.getString("nombre").trim()+" (Cuota "+cMes+" de "+tCuotas+")";
                  
                                        ddesc = Rs4.getDouble("ndias_horas");
                                    }   
                      
                                } catch (SQLException ex) {
                      
                                    Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
                  
                                }
                         
                        }else{  
                             
                            ddesc = Double.parseDouble(Rs3.getString("valor").trim());   
                            dnombre = Rs3.getString("nombre").trim();    
                        }
                         
                        if (adcIsapre){             //Si existe diferencia se ingresa descuento "ADICIONAL ISAPRE"
                            
                             tdesc = tdesc + ddesc;
                             ModelD.addRow(new Object[]{dnombre,"$ "+formateador.format(ddesc),Rs3.getString("codigo").trim(),Rs3.getDouble("porcentaje")});
                         
                        }
                         
                        if (prestamo){             //Si existe préstamo del trabajador
                            
                             tdesc = tdesc + ddesc;
                             ModelD.addRow(new Object[]{dnombre,"$ "+formateador.format(ddesc),Rs3.getString("codigo").trim(),Rs3.getDouble("porcentaje")});
                         
                        }
                         
                    }
                   
          //***************************** OTROS ****************************************//                    
                    double dcotiz = 0; 
                    
                    if (tipocontrato.trim().equals("62")){                      //Si es "CONTRATO INDEFINIDO"
                         
                        if (!txRut.getText().trim().equals("5925941")){
                        
                        //  dcotiz = Precision.round(himponibleces*0.024,4);             //el empledador le impone al trabajador el 2,4 %
                            dcotiz = Precision.round(himponibleces*AFC2,4);
                        
                        }else if (txRut.getText().trim().equals("5925941")){
                                
                            dcotiz = 0;    
                        }    
                                                                                // y el trabajador impone el 0,6 % restante
                    }else if (tipocontrato.trim().equals("61")){                //Si es "CONTRATO FIJO" 
                        
                        if (!txRut.getText().trim().equals("5925941")){
                        
                         // dcotiz = Precision.round(himponibleces*0.030,0);             //el empleador le impone al trabajador el 3 %
                            dcotiz = Precision.round(himponibleces*AFC1,0);
                             
                             
                        }else if (txRut.getText().trim().equals("5925941")){
                                
                            dcotiz = 0;    
                        }  
                        
                    }
                    
                    txCesantia.setText("$ "+formateador.format(dcotiz));        //SEGURO DE CESANTIA POR PARTE DEL EMPLEADOR
                    
                 //*******************************************************************************************   
                    
                //  dcotiz = Precision.round(himponible*0.0127,4);                //SEGURO ACCIDENTE EN EL TRABAJO
                    dcotiz = Precision.round(himponible*MUTUAL,4);
                    
                    txMutual.setText("$ "+formateador.format(dcotiz));
                   
                  //*********************************************************************************************** 
                    
                    if (!txRut.getText().trim().equals("5925941")){            
                       
                 //     dcotiz = Precision.round(himponible*0.0199,4);                //SEGURO DE INVALIDEZ Y SOBREVIVENCIA
                        dcotiz = Precision.round(himponible*SIS,4);
                    
                    }else if (txRut.getText().trim().equals("5925941")){
                    
                        dcotiz = 0;
                    }
  
                    txSis.setText("$ "+formateador.format(dcotiz));
                    
                 //*****************************************************************************************************    
                    totalr = thaber - tdesc;
                    String stotalr = "$ "+formateador.format(totalr)+"";
                    
                    txTotalHaber.setText("$ "+formateador.format(thaber));
                                               
                    ttrib = thaberim - dtrib;
                     
                    
                    txTopeImpCes.setText("$ "+formateador.format(topeimpces));
                        
                    txTopeImp.setText("$ "+formateador.format(topeimp));
                    
                    txTotalImp.setText("$ "+formateador.format(thaberim));
                    
                    txTotalTrib.setText("$ "+formateador.format(ttrib));
                   
                    txTotalDesc.setText("$ "+formateador.format(tdesc));
                    
                    txTotal.setText(stotalr);
                      
                    if (cr == 2){                   //Se cargan los comboBox de fecha
                       aMes(m,y);                   // con el mes y año actual
                    }                                   
                   
                    uagno = cbAgno.getSelectedItem().toString();
                    elmes = String.valueOf(cbMes.getSelectedIndex());
                    
                    Rs1 = Sql1.Select("SELECT sum(CAST(ndias_horas AS int)) AS ndias \n"+             //Verifica si hay que descontar dias no trabajados por austentismo o licencia
                                      "FROM personal_plhx \n"+
                                      "WHERE rut="+rut+" \n"+
                                      "AND EXTRACT(YEAR FROM dfecha) = "+uagno+ "\n"+
                                      "AND EXTRACT(MONTH FROM dfecha) = "+elmes+ "\n"+ 
                                      "AND tipo IN ('2','4')");
                    
                    
                    if (Sql1.GetRowCount() > 0){                                            //Si el trabajor tiene dias no trabajados
                        
                        Rs1.next();
                        int dnotrab =  30 - Rs1.getInt("ndias");                            //Se le restan a los 30 días laborales
                        
                        if (dnotrab < 0){
                        
                           dnotrab = 0;
                        
                        }
                        
                        String snotrab = String.valueOf(dnotrab);
                        
                        txDiasT.setText(snotrab);
                        btModifica.doClick();
                     
                    }else {                                                                 //De lo contrario el trabajador tiene 30 dias laborales
                    
                        txDiasT.setText("30");
                    
                    }
                    
                    
                    Rs5 = Sql5.Select("SELECT ndias_horas, tipo \n"+             //Se capturan los dias de vacaciones y los no trabajados por austentismo o licencia
                                      "FROM personal_plhx \n"+
                                      "WHERE rut="+rut+" \n"+
                                      "AND EXTRACT(YEAR FROM dfecha) = "+uagno+ "\n"+
                                      "AND EXTRACT(MONTH FROM dfecha) = "+elmes+ "\n"+ 
                                      "AND tipo IN ('1','2','4')");
                    
                    
                    
                    int dias1 = 0;
                    int dias2 = 0;
                    int dias4 = 0; 
                    
                   if (Sql5.GetRowCount() > 0){                                            
                        
                        while (Rs5.next()){
                            
                            
                            if (Rs5.getString("tipo").equals("1")){             //Dias de FERIADO LEGAL
                            
                               dias1 = dias1 + Rs5.getInt("ndias_horas"); 
                            
                            }else if (Rs5.getString("tipo").equals("2")){       //Dias de LICENCIA MEDICA
                            
                               dias2 = dias2 + Rs5.getInt("ndias_horas");  
                            
                            }else if (Rs5.getString("tipo").equals("4")){       //Dias de AUSENTISMO
                            
                               dias4 = dias4 + Rs5.getInt("ndias_horas");  
                            
                            }
                         
                        }
                     
                    }else {                                                                 //De lo contrario el trabajador tiene 30 dias laborales
                     
                         dias1 = 0;
                         dias2 = 0;
                         dias4 = 0;
                                               
                    }  
                     
                     
                    txFeriados.setText(""+dias1);
                    txLicencia.setText(""+dias2);
                    txInasistencia.setText(""+dias4);
                    
                    
                    
  //**************************************************************************************************************************************************************//                 
                }else if (nuevo == 1){              //si existe el registro
                    
                     Rs2 = Sql2.Select("SELECT agno, mes, estado FROM psueldosdet WHERE rut=" + rut + " ORDER BY agno desc, mes DESC LIMIT 1");
                     Rs2.next();
                    
                     if(cr==2){                 //si se eligirá el mes y el año automáticamente
                         
                        uagno = Rs2.getString("agno");
                        umes =  Rs2.getInt("mes");   
                        aMes(umes,uagno); 
                        
                     }else if(cr==1){                   //si ya fueron elegidos el mes y el año en los combobox
                         
                        uagno = cbAgno.getSelectedItem().toString();
                        umes = cbMes.getSelectedIndex();
                      
                        if (rut.equals("") || uagno.equals("AÑO") || elmes.equals("MES") ){
                            return;
                        }
                      
                     //************************* HABERES *********************************************//
                        Rs = Sql.Select("SELECT pg.nombre, det.monto, det.codigo, det.dtrab, det.estado, det.feriados, det.tramo_fam, det.descripcion, hd.vdtrab, hd.cod_bono\n" +
                                        "FROM psueldosdet det\n" +
                                        "LEFT JOIN par_general pg ON det.codigo=pg.codigo \n" +
                                        "LEFT JOIN personalhd hd ON det.codigo=hd.codigo AND det.rut=hd.rut \n" +
                                        "WHERE det.rut="+ rut + " AND det.agno="+ uagno +" AND det.mes="+umes+"\n"+
                                        "AND pg.tipo IN ('REM_HABERES','REM_TOTALES')");
                
                        double dhaber2 = 0;
                          
                        while(Rs.next()){
                        
                            if (Rs.getString("codigo").equals("0")){ 
                           
                               txDiasT.setText(Rs.getString("dtrab"));
                               valordia = Rs.getDouble("vdtrab");
                            }
                       
                            
                            if (!Rs.getString("codigo").equals("70") && !Rs.getString("codigo").equals("71") && !Rs.getString("codigo").equals("72") &&  
                                !Rs.getString("codigo").equals("73") && !Rs.getString("codigo").equals("83")  && !Rs.getString("codigo").equals("84") &&
                                !Rs.getString("codigo").equals("85") && !Rs.getString("codigo").equals("86")){                
                            
                            
                                dhaber2 = Double.parseDouble(Rs.getString("monto").trim()); 
                            
                            }
                       
                            if (!Rs.getString("codigo").equals("2") && !Rs.getString("codigo").equals("3")                      //SI NO SON NO-IMPONIBLES
                                && !Rs.getString("codigo").equals("6") && !Rs.getString("codigo").equals("7")
                                && !Rs.getString("codigo").equals("29") && !Rs.getString("codigo").equals("32")
                                && !Rs.getString("codigo").equals("70") && !Rs.getString("codigo").equals("71")
                                && !Rs.getString("codigo").equals("72") && !Rs.getString("codigo").equals("73")
                                && !Rs.getString("codigo").equals("83") && !Rs.getString("codigo").equals("84")
                                && !Rs.getString("codigo").equals("83") && !Rs.getString("codigo").equals("85")
                                && !Rs.getString("codigo").equals("83") && !Rs.getString("codigo").equals("86")) {
                                
                                
                                if (Rs.getString("codigo").equals("4") || Rs.getString("codigo").equals("9") ||
                                    Rs.getString("codigo").equals("10") || Rs.getString("codigo").equals("11") ||                 //RENTAS VARIABLES
                                    Rs.getString("codigo").equals("28") || Rs.getString("codigo").equals("36") ||
                                    Rs.getString("codigo").equals("37") || Rs.getString("codigo").equals("38") ||
                                    Rs.getString("codigo").equals("39") || Rs.getString("codigo").equals("75") ||
                                    Rs.getString("codigo").equals("76") ){ 
                                    
                                    codigo_bono = Rs.getInt("cod_bono");
                                    tsem_corr = tsem_corr + dhaber2;
                                    trenta_var = trenta_var + dhaber2;
                                }   
                                 
                                 
                                 
                                if (Rs.getString("codigo").equals("8")){                      //SEMANA CORRIDA
                                    
                                    eligeSem = -8;                                          
                                    trenta_var = trenta_var + dhaber2;
                                    
                                    dcant = Integer.parseInt(Rs.getString("dtrab"));
                                    dcant2 = Rs.getInt("feriados");
                                    semana = true;
                                    codigo_bono = 0;
                                }
                                
                                if (Rs.getString("codigo").equals("35")){                      //DIFERENCIA PAGO HORAS EXTRAS
                                
                                    trenta_var = trenta_var + dhaber2;
                                    codigo_bono = 0;
                                }
                                                                
                                thaberim = thaberim + dhaber2;
                            }
                            
                            
                            if (Rs.getString("codigo").equals("6")){                      //ASIGNACION FAMILIAR
                                
                                    eligeFam = -6;
                                    codigo_bono = 0;
                                    lbTramo.setText(Rs.getString("tramo_fam"));
                            }
                            
                            if (Rs.getString("codigo").equals("73")){                   //TOPE IMPONIBLE CESANTIA
                            
                               topeimpces = Rs.getDouble("monto");
                            
                            
                            }

                            if (Rs.getString("codigo").equals("83")){                   //TOPE IMPONIBLE
                            
                               topeimp = Rs.getDouble("monto");
                            
                            
                            }
                       
                            
                            if (!Rs.getString("codigo").equals("70") && !Rs.getString("codigo").equals("71") && !Rs.getString("codigo").equals("72") &&  
                                !Rs.getString("codigo").equals("73") && !Rs.getString("codigo").equals("83") && !Rs.getString("codigo").equals("84") &&
                                !Rs.getString("codigo").equals("85") && !Rs.getString("codigo").equals("86") ){                   
                            
                                String nombre = "";
                                
                                if (Rs.getString("codigo").equals("41")){
                                
                                   nombre = Rs.getString("descripcion").trim();  
                                   
                                    if (nombre.equals("SN")){
                                   
                                      nombre = "HORAS EXTRAS";  
                                   
                                   }
                                   
                                
                                }else{
                                
                                
                                    nombre = Rs.getString("nombre").trim();
                                
                                }
                                
                                
                                thaber = thaber + dhaber2;        
                                String vhaber = "$ "+formateador.format(dhaber2);
                                
                                
//                                ModelH.addRow(new Object[]{Rs.getString("nombre").trim(),vhaber,Rs.getString("codigo").trim(),codigo_bono});
                                ModelH.addRow(new Object[]{nombre,vhaber,Rs.getString("codigo").trim(),codigo_bono});
                            
                            }
                        }
                        
                        
                  //************************* DESCUENTOS ************************************************//
                        String snombre = "";
                        Rs = Sql.Select("SELECT p.nombre, det.monto, det.codigo, det.porcentaje, det.dtrab, det.estado,det.descripcion \n" +
                                        "FROM psueldosdet det \n" +
                                        "LEFT JOIN par_general p ON det.codigo=p.codigo \n" +
                                        "WHERE det.rut="+ rut + " AND det.agno="+ uagno +" AND det.mes="+umes+" \n"+
                                        "AND p.tipo IN ('REM_DESCUENTOS')");
                         
                        
                        while(Rs.next()){
                      
                           double ddesc = Precision.round(Rs.getDouble("monto"),0);
                                
                           if (Rs.getString("nombre").trim().contains("AFP")){                    //AFP COMISION
                              
                              double mpor = Precision.round(Rs.getDouble("porcentaje")*100,4);
                              snombre =  Rs.getString("nombre").trim() + " (" +mpor+ "%)";
                    
                              
                              eligeAfp = 1;  
                              dtrib = dtrib + ddesc;
                                
                           }else if (Rs.getString("codigo").equals("13")){                      //AFP OBLIGATORIO
                               
                              double mpor = 0.10*100;
                              snombre =  Rs.getString("nombre").trim() + " (" +Math.round(mpor)+ "%)";
                              dtrib = dtrib + ddesc;
                              
                           }else if (Rs.getString("codigo").equals("33")){                      //APV B
                              
                              snombre =  Rs.getString("nombre").trim();
//                              dtrib = dtrib + ddesc;
                              
                           }else if (Rs.getString("codigo").equals("5")){                       //FONASA
                              tieneIsapre = false;
                              eligeFonasa = -5;
                              snombre =  Rs.getString("nombre").trim() + " (7%)";
                              dtrib = dtrib + ddesc;
                              
                           }else if (Rs.getString("codigo").equals("17") || Rs.getString("codigo").equals("24") || Rs.getString("codigo").equals("34") || //ISAPRE OBLIGATORIO
                                    Rs.getString("codigo").equals("42") || Rs.getString("codigo").equals("43") || Rs.getString("codigo").equals("44")){
                                   
                                    tieneIsapre = true;
                                    double mpor = Rs.getDouble("porcentaje")*100;
                                    snombre =  Rs.getString("nombre").trim() + " (" +Math.round(mpor)+ "%)";
                                    dtrib = dtrib + ddesc;
                                
                             
                           }else if (Rs.getString("codigo").equals("18")){                      //ADICIONAL ISAPRE
                              
                              snombre =  Rs.getString("nombre").trim();
                              dtrib = dtrib + ddesc;
                          
                           }else if (Rs.getString("codigo").equals("14")){                      //SEGURO CESANTIA
                          
                              double mpor = Precision.round(Rs.getDouble("porcentaje")*100,4);
                              snombre =  Rs.getString("nombre").trim() +  " (" +mpor+ "%)";
                              dtrib = dtrib + ddesc;
                              eligeCesan = -140;
                      
                           }else if (Rs.getString("codigo").equals("19")){                      //IMPUESTO UNICO
                              snombre =  Rs.getString("nombre").trim();
                              eligeImp = -190;
                           
                           }else if (Rs.getString("codigo").equals("20")){                      //PRESTAMO EMPRESA
                              
                              cMes = Rs.getInt("dtrab");
                              tCuotas = Rs.getInt("porcentaje");
                               
                              snombre =  Rs.getString("nombre").trim()+" (Cuota "+cMes+" de "+tCuotas+")";
                              eligeImp = -190;
                           
                           }else if (Rs.getString("codigo").equals("78") ||         //DESCUENTO
                                     Rs.getString("codigo").equals("79") ){         //PRESTAMO CAJA COMPENSACION
                           
                              snombre =  Rs.getString("descripcion").trim();
                              eligeImp = -190;                          
                              
                           }else{
                              snombre = Rs.getString("nombre").trim();
                            
                           }
                           
                           
                           tdesc = tdesc + ddesc;
                           Estado = Rs.getBoolean("estado");                    //Captura el estado del cierre de mes (Cerrado o Abierto)
                           ModelD.addRow(new Object[]{snombre,"$ "+formateador.format(ddesc),Rs.getString("codigo").trim(),Rs.getDouble("porcentaje")});
                        }
                        
                        
                        int dias1 = 0;
                        int dias2 = 0;
                        int dias4 = 0; 
                    
                        Rs5 = null;
                        
                        
                        
//                         Rs5 = Sql5.Select("SELECT ndias_horas, tipo \n"+             
//                                      "FROM personal_plhx \n"+
//                                      "WHERE rut="+rut+" \n"+
//                                      "AND EXTRACT(YEAR FROM dfecha) >= "+uagno+ "\n"+
//                                      "AND EXTRACT(MONTH FROM dfecha) >= "+elmes+ "\n"+ 
//                                      "AND tipo IN ('1','2','4')");
                         
                         
                         
                         Rs5 = Sql5.Select("SELECT ndias_horas, tipo \n"+             
                                           "FROM personal_plhx \n"+
                                           "WHERE rut="+rut+" \n"+
                                           "AND EXTRACT(YEAR FROM dfecha) = "+uagno+ "\n"+
                                           "AND EXTRACT(MONTH FROM dfecha) = "+elmes+ "\n"+ 
                                           "AND tipo IN ('1','2','4')");
                        
                        
                        if (Sql5.GetRowCount() > 0){                                            
                        
                            while (Rs5.next()){
                            
                            
                                if (Rs5.getString("tipo").equals("1")){             //Dias de FERIADO LEGAL
                            
                                    dias1 = dias1 + Rs5.getInt("ndias_horas"); 
                            
                                }else if (Rs5.getString("tipo").equals("2")){       //Dias de LICENCIA MEDICA
                            
                                    dias2 = dias2 + Rs5.getInt("ndias_horas");  
                            
                                }else if (Rs5.getString("tipo").equals("4")){       //Dias de AUSENTISMO
                            
                                    dias4 = dias4 + Rs5.getInt("ndias_horas");  
                            
                                }
                         
                            }
                     
                        }else {                                                                 //De lo contrario el trabajador tiene 30 dias laborales
                     
                            dias1 = 0;
                            dias2 = 0;
                            dias4 = 0;
                                               
                        }  
                     
                     
                        txFeriados.setText(""+dias1);
                        txLicencia.setText(""+dias2);
                        txInasistencia.setText(""+dias4);
                    
                
                        totalr = thaber - tdesc;
                        txTotalHaber.setText("$ "+formateador.format(thaber));
                           
                        ttrib = thaberim - dtrib;
                        
                        txTopeImpCes.setText("$ "+formateador.format(topeimpces));
                        
                        txTopeImp.setText("$ "+formateador.format(topeimp));
                        
                        txTotalImp.setText("$ "+formateador.format(thaberim));
                         
                        txTotalTrib.setText("$ "+formateador.format(ttrib));
                        
                        txTotalDesc.setText("$ "+formateador.format(tdesc));
                            
                        String stotalr = "$ "+formateador.format(totalr)+"";
                        
                        txTotal.setText(stotalr);
                        
                        
                //***************************** OTROS ******************************************//
                        Rs = Sql.Select("SELECT p.nombre, det.* \n" +
                                        "FROM psueldosdet det \n" +
                                        "LEFT JOIN par_general p ON det.codigo=p.codigo \n" +
                                        "WHERE det.rut="+ rut + " AND det.agno="+ uagno +" AND det.mes="+umes+" \n"+
                                        "AND p.tipo IN ('REM_OTROS')");
                        
                        double dcotiz, dcotiz2,dcotiz3 = 0; 
                        
                        if(Sql.GetRowCount()>0){
                        
                            while(Rs.next()){
                                  
                                if (Rs.getString("codigo").equals("63")){            //SEGURO DE CESANTIA POR PARTE DEL EMPLEADOR
                                         
                                   dcotiz = Precision.round(Rs.getDouble("monto"),0);
                                   txCesantia.setText("$ "+formateador.format(dcotiz));
                                   double mpor = Rs.getDouble("porcentaje")*100;
                                   jLabel5.setText(Rs.getString("nombre").trim() + " (" +mpor+ "%)");
                                 
                                }else if (Rs.getString("codigo").equals("64")){             //SEGURO ACCIDENTE EN EL TRABAJO
                                
                                   dcotiz2 = Precision.round(Rs.getDouble("monto"),0);
                                   txMutual.setText("$ "+formateador.format(dcotiz2));
                                   double mpor = Rs.getDouble("porcentaje")*100;
                                   jLabel4.setText(Rs.getString("nombre").trim() + " (" +Precision.round(mpor,2)+ "%)");
                                 
                                }else if (Rs.getString("codigo").equals("65")){         //SEGURO INVALIDEZ Y SOBREVIVENCIA
                                 
                                   dcotiz3 = Precision.round(Rs.getDouble("monto"),0);
                                   txSis.setText("$ "+formateador.format(dcotiz3));
                                   double mpor = Rs.getDouble("porcentaje")*100;
                                   jLabel6.setText(Rs.getString("nombre").trim() + " (" +Precision.round(mpor,2)+ "%)");
                                }
                            }    
                        } 
              
                        if(Estado){
                            
                          lbEstado.setText("ABIERTO");
                        
                        }else{
                          
                          lbEstado.setText("CERRADO");
                        
                        }
                          
                     } 
                 }              
        }catch (SQLException | NumberFormatException e) {
            
            System.out.println(e.getMessage());
        
        }catch (IOException ex) {
        
            Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
        
        }finally{
            
            Sql.Close();
            Sql3.Close();
           
        }
         
    }
    
    private void aMes(int m, String a) {
                                                                                   
        for (int i = 0; i < cbAgno.getItemCount(); i++) {                       // codigo agregado por R. Lopez
            
            String an = (String) cbAgno.getItemAt(i);  
                                               
            if (an.equals(a)){                                                  //se selecciona automáticamente el año y 
               autom = 1;                                                       //el mes de los ComboBox de acuerdo  
               cbAgno.setSelectedIndex(i);                                      //a la comsulta SQL
               cbMes.setSelectedIndex(m);      
               
               break;
            }
       }
    }   
   
    private void RecalDesc(boolean rcl){
       
        double totalr     = 0;
        double porcentaje = 0;
        double ddesc      = 0;
        double planIsapre = 0;
        int fila          = 0;
        tdesc             = 0;
        dtrib             = 0;
        ttrib             = 0;
        adcIsapre         = false;
      
        
        DefaultTableModel ModelD = (DefaultTableModel) GrillaDescuentos.getModel();
        
        if (rcl){           //Si es gratificación o Haber Imponible es verdadero
             
            if (thaberim > topeimp){
                    
                himponible = topeimp;
                    
            }else{
                    
                himponible = thaberim;
                    
            }
                    
            if (thaberim > topeimpces){
                    
                himponibleces = topeimpces; 
                    
            }else{
                       
                himponibleces = thaberim;  
                    
            }
            
        
            for(int i=0; i< GrillaDescuentos.getRowCount();i++){
              
                if (GrillaDescuentos.getValueAt(i,0).toString().contains("AFP")){      //AFP COMISION
                
                    porcentaje = Double.parseDouble(GrillaDescuentos.getValueAt(i,3).toString());   
                    fonasadesc = Precision.round(himponible*porcentaje,0);
                    ddesc = Math.round(fonasadesc); 
                    dtrib = dtrib + ddesc;
                    GrillaDescuentos.setValueAt("$ "+formateador.format(ddesc), i,1);
                 
                }else if (GrillaDescuentos.getValueAt(i,2).toString().equals("5")){     //FONASA
                
                    porcentaje = Double.parseDouble(GrillaDescuentos.getValueAt(i,3).toString());   
                    ddesc = Precision.round(himponible*porcentaje,0);
                    ddesc = Math.round(ddesc); 
                    dtrib = dtrib + ddesc;
                    GrillaDescuentos.setValueAt("$ "+formateador.format(ddesc), i,1); 
                 
                }else if (GrillaDescuentos.getValueAt(i,2).toString().equals("17") || GrillaDescuentos.getValueAt(i,2).toString().equals("24") ||   //ISAPRE OBLIGATORIO
                          GrillaDescuentos.getValueAt(i,2).toString().equals("34") || GrillaDescuentos.getValueAt(i,2).toString().equals("42") ||
                          GrillaDescuentos.getValueAt(i,2).toString().equals("43") || GrillaDescuentos.getValueAt(i,2).toString().equals("44")){
                      
                          porcentaje = Double.parseDouble(GrillaDescuentos.getValueAt(i,3).toString());   
                          ddesc = Precision.round(himponible*porcentaje,0);
                          ddesc = Math.round(ddesc); 
                      
                          cubreIsapre = ddesc;                                  
                      
                          dtrib = dtrib + ddesc;
                          GrillaDescuentos.setValueAt("$ "+formateador.format(ddesc), i,1);
            
                }else if (GrillaDescuentos.getValueAt(i,2).toString().equals("18")){     //ADICIONAL ISAPRE
                       
                        planIsapre = ind.GetUfIsapre()*Double.parseDouble(GrillaDescuentos.getValueAt(i,3).toString());
                        fila = i;        
                        adcIsapre = true;
            
                }else if (GrillaDescuentos.getValueAt(i,2).toString().equals("13")){        //AFP OBLIGATORIO
                
                        porcentaje = Double.parseDouble(GrillaDescuentos.getValueAt(i,3).toString());   
                        ddesc = Precision.round(himponible*porcentaje,0);
                        ddesc = Math.round(ddesc); 
                        dtrib = dtrib + ddesc;
                        GrillaDescuentos.setValueAt("$ "+formateador.format(ddesc), i,1); 
             
                }else if (GrillaDescuentos.getValueAt(i,2).toString().equals("14")){          //SEGURO CESANTIA
               
                        porcentaje = Double.parseDouble(GrillaDescuentos.getValueAt(i,3).toString());   
                        ddesc = Precision.round(himponibleces*porcentaje,0);
                        ddesc = Math.round(ddesc); 
                        dtrib = dtrib + ddesc;
                        GrillaDescuentos.setValueAt("$ "+formateador.format(ddesc), i,1); 
                 
                }else if (GrillaDescuentos.getValueAt(i,2).toString().equals("19")){          //IMPUESTO UNICO
                
                        if (ttrib < impunico.Getrango1()){                                //Si la renta no está afecta a Impuesto único, eliminar descuento por IMPUESTO UNICO
                    
                            ExeSql Sql = new ExeSql();
           
                            try{
                                Sql.ExeSql("DELETE FROM psueldosdet WHERE rut='"+ txRut.getText().trim() +"' \n"+
                                           "AND agno='"+cbAgno.getSelectedItem().toString().trim()+ "' \n" +
                                           "AND mes='"+cbMes.getSelectedIndex() + " '\n" +
                                           "AND codigo='"+GrillaDescuentos.getValueAt(i,2)+"'");
            
                            }catch (SQLException ex) {
                                    Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
                            }    
                    
                            ModelD.removeRow(i);
                            eligeImp = 190; 
                            Iunico = false;
                    
                        }
        
                }else if (GrillaDescuentos.getValueAt(i,2).toString().equals("33")){          //APV B
                   
                       String result = GrillaDescuentos.getValueAt(i, 1).toString().trim().replaceAll("\\$","");
                       String result2 = result.replaceAll("\\.","");
                       ddesc = Double.parseDouble(result2.trim());
                                
                       ddesc = Math.round(ddesc); 
//                       dtrib = dtrib + ddesc;
                 
                }else{
                    
                       String result = GrillaDescuentos.getValueAt(i, 1).toString().trim().replaceAll("\\$","");
                       String result2 = result.replaceAll("\\.","");
                       ddesc = Double.parseDouble(result2.trim());
                                
                       ddesc = Math.round(ddesc); 
                           
                }  
                tdesc = tdesc + ddesc;
            }
        
        
            if (adcIsapre){
            
                if(planIsapre > cubreIsapre){                                //Si el Plan Isapre excede el 7% de salud, calcular diferencia  y agregarla como "ADICIONAL ISAPRE"
                    
                    ddesc = planIsapre - cubreIsapre;  
                    dtrib = dtrib + ddesc;
                    tdesc = tdesc + ddesc;
                    GrillaDescuentos.setValueAt("$ "+formateador.format(ddesc), fila,1);
                }else{
            
                    ModelD.removeRow(fila);                                             //Si el Plan Isapre no execde el 7% de salud, eliminar "ADICIONAL ISAPRE"
                }
        
            }
         
            
            ttrib = thaberim - dtrib;
        
            totalr = thaber - tdesc;
        
            txTotalHaber.setText("$ "+formateador.format(thaber));
            txTotalImp.setText("$ "+formateador.format(thaberim));
            txTotalTrib.setText("$ "+formateador.format(ttrib));
            txTotalDesc.setText("$ "+formateador.format(tdesc));
            txTotal.setText("$ "+formateador.format(totalr)); 
        
        }else if (!rcl){                    //Si no es haber imponible o gratificación es falso
        
            double tdescuento = 0;
            double ddesc2 = 0;
            
            for(int i=0; i< GrillaDescuentos.getRowCount();i++){
             
                String result = GrillaDescuentos.getValueAt(i, 1).toString().trim().replaceAll("\\$","");
                String result2 = result.replaceAll("\\.","");
                ddesc2 = Double.parseDouble(result2.trim());
                
                tdescuento = tdescuento + ddesc2;
          
           }
        
            totalr = thaber - tdescuento; 
            txTotalHaber.setText("$ "+formateador.format(thaber));
            txTotal.setText("$ "+formateador.format(totalr));  
        }  
        
    }   
   
    private void RecalSemanas(){
    
        
        double dhaber       = 0;
        double result3      = 0;
        String res, res2    = ""; 
        String semana_cod  = "0";
        String semana_nom   = "";  
        
        
        
        DefaultTableModel tbMh = (DefaultTableModel) GrillaHaberes.getModel();
        
        for (int i =0;i < tbMh.getRowCount();i++){
                
            codigoHaber =  tbMh.getValueAt(i,2).toString().trim();
            nombreHaber =  tbMh.getValueAt(i,0).toString().trim();
            valorHaber =  tbMh.getValueAt(i,1).toString().trim();
            
            res = valorHaber.replaceAll("\\$","");
            res2 = res.trim().replaceAll("\\.","");
            result3 = Double.parseDouble(res2.trim());
            
            if (codigoHaber.equals("8")){   
                
                trenta_var = trenta_var - result3;
                thaberim = thaberim - result3;
                thaber = thaber - result3;
                        
                semana_cod = codigoHaber.trim();
                semana_nom = nombreHaber.trim();
                
                tbMh.removeRow(i);
                
                dhaber = Math.round((tsem_corr / dcant) * dcant2);       
                
                trenta_var = trenta_var + dhaber;
                thaberim = thaberim + dhaber;
                thaber = thaber + dhaber;
                              
                tbMh.addRow(new Object[]{semana_nom, "$ "+formateador.format(dhaber),semana_cod.trim()});
                break;
            }       
            
         }
    
    }
    
    
    private void RecalGratif(boolean rcl){
        
        double dhaber     = 0;
        double result3    = 0;
        String res, res2  = ""; 
        String gratcod    = "0";
        String gratnom    = "";  
        
        if (rcl){      //Si es un haber imponible o Gratificación es rc1 es verdadero
            
            DefaultTableModel tbMh = (DefaultTableModel) GrillaHaberes.getModel();
        
            for (int i =0;i < tbMh.getRowCount();i++){
                
                codigoHaber =  tbMh.getValueAt(i,2).toString().trim();
                nombreHaber =  tbMh.getValueAt(i,0).toString().trim();
                valorHaber =  tbMh.getValueAt(i,1).toString().trim();
            
                if (codigoHaber.equals("1")){       //Si el Haber es la Gratificación
              
                   res = valorHaber.replaceAll("\\$","");
                   res2 = res.trim().replaceAll("\\.","");
                   result3 = Double.parseDouble(res2.trim());
                    
                   thaberim = thaberim - result3;   //Se elimina la Gratificación del total haber imponible
                   thaber = thaber - result3;       //Se elimina la Gratificación del total haber
                        
                   gratcod = codigoHaber.trim();        //Se guarda el nombre del haber Gratificación
                   gratnom = nombreHaber.trim();        //Se guarda el c'odigo del haver Gratificación
                
                   tbMh.removeRow(i);                   //Se elimina la fila de la tabla donde se guarda la Gratificación
                   
                   dhaber = Math.round(thaberim * 0.25);         //Se recalcula la Gratificación   
                    
                   if (dhaber > Math.round(ind.GetGratif())){
                   
                       dhaber = Math.round(ind.GetGratif());
                   
                   }
                
                   thaberim = thaberim + dhaber;    //Se suma la Gratificación al total haber imponible
                                
                   thaber = thaber + dhaber;         //Se suma la Gratificación al total haber
                
                   tbMh.addRow(new Object[]{gratnom, "$ "+formateador.format(dhaber),gratcod.trim(),0});  // Se agrega la fila de la tabla donde se guarda la Gratificación
                   break;
                }       
            
            }
        }
       
    }
   
    
    private void ImprimeLiquidacion() {
       
        try {
            
            //Connection conn = null;
            //conn = DriverManager.getConnection("jdbc:postgresql://192.168.0.150:5432/luvaly_final", "dalcaman", "goliat");
            //conn.setAutoCommit(false);
            //JasperReport reporte = null;
            //String path = "src\\Reportes\\rpLiquidacion.jasper";
          
            String dato,nombre = "";
            Map parametro = new HashMap();
            
            parametro.put("MES",cbMes.getSelectedItem());
            parametro.put("AGNO",cbAgno.getSelectedItem());
            
            parametro.put("RUT",formatearRut(txRut.getText()+Dv));
            parametro.put("NOMBRE",txNombre.getText());
            parametro.put("DEPARTAMENTO",lbDepto.getText());
            parametro.put("CARGO",lbCargo.getText());
            parametro.put("CONTRATO",lbContra.getText());                    
            parametro.put("CARGAS",lbNcargas.getText()); 
             
            parametro.put("DTRAB",txDiasT.getText());
            parametro.put("VACACIONES",txFeriados.getText());
            parametro.put("LICENCIA",txLicencia.getText());
            parametro.put("INASIST",txInasistencia.getText());
            
             
            for(int i=0; i< GrillaHaberes.getRowCount();i++){
                
                dato = GrillaHaberes.getValueAt(i,2).toString();    
                
                if (dato.equals("0")){
                        parametro.put("SBASE",GrillaHaberes.getValueAt(i,1));               
                }else if(dato.equals("1")){    
                        parametro.put("GRATIF",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("2")){    
                        parametro.put("COLAC",GrillaHaberes.getValueAt(i,1));  
                }else if (dato.equals("3")){    
                        parametro.put("MOVIL",GrillaHaberes.getValueAt(i,1));      
                }else if(dato.equals("4")){    
                        parametro.put("GRATIF_VOL",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("6")){    
                        parametro.put("ASIGN_FAM",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("7")){    
                        parametro.put("VIATICOS",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("8")){    
                        parametro.put("SEM_CORR",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("9")){    
                        parametro.put("COM_GES_MIX",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("10")){    
                        parametro.put("BONO_PROD",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("11")){    
                        parametro.put("COM_GES_COBR",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("28")){    
                        parametro.put("COM_VENT",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("29")){    
                        parametro.put("CARG_FAM",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("30")){    
                        parametro.put("DIF_SUELD_ANT",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("31")){    
                        parametro.put("HORAS_ATRASO",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("32")){    
                        parametro.put("AGUINALDO",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("35")){    
                        parametro.put("DIF_PAGO_H_EXTRAS",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("36")){    
                        parametro.put("BONO_CUMP_MARGEN",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("37")){    
                        parametro.put("BONO_CUMP_PRESUP",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("38")){    
                        parametro.put("BONO_CUMP_FACT",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("200")){    
                        parametro.put("BONO_CUMP_RESULT",GrillaHaberes.getValueAt(i,1));  //BONO UNICO EXTRAORDINARIO
                }else if(dato.equals("40")){    
                        parametro.put("DIAS_NO_CONTRAT",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("41")){    
                       parametro.put("TEXT_HEXTRAS",GrillaHaberes.getValueAt(i,0)); 
                       parametro.put("H_EXTRAS",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("45")){    
                        parametro.put("FERIADO",GrillaHaberes.getValueAt(i,1));  
                } 
                
            }
            
            for(int i=0; i< GrillaDescuentos.getRowCount();i++){
               
                dato = GrillaDescuentos.getValueAt(i,2).toString(); 
                nombre = GrillaDescuentos.getValueAt(i,0).toString(); 
                
                if(dato.equals("5")){
                        parametro.put("SALUD","FONASA (7%)");
                        parametro.put("TSALUD",GrillaDescuentos.getValueAt(i,1));
                        parametro.put("SALUD2","");
                        parametro.put("TSALUD2","");
                }else if(dato.equals("17") || dato.equals("24") || dato.equals("34") ||   //ISAPRE
                        dato.equals("42") || dato.equals("43") || dato.equals("44") ){ 
                        parametro.put("SALUD",GrillaDescuentos.getValueAt(i,0));
                        parametro.put("TSALUD",GrillaDescuentos.getValueAt(i,1));
                }else if(nombre.contains("ADICIONAL")){                             //ADICIONAL ISAPRE
                        parametro.put("SALUD2",GrillaDescuentos.getValueAt(i,0));
                        parametro.put("TSALUD2",GrillaDescuentos.getValueAt(i,1));
                }else if(dato.equals("13")){                                        //AHORRO PREVISIONAL OBLIGATORIO                  
                       parametro.put("CAFP",GrillaDescuentos.getValueAt(i,0));
                       parametro.put("AFP",GrillaDescuentos.getValueAt(i,1));
                }else if (nombre.contains("AFP")){                                  //Comision AFP
                        parametro.put("AFP2",GrillaDescuentos.getValueAt(i,0));
                        parametro.put("TAFP2",GrillaDescuentos.getValueAt(i,1));
                }else if(dato.equals("25")){    
                        parametro.put("APV-A",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("33")){    
                        parametro.put("APV-B",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("14")){    
                        parametro.put("DSEG_CES",GrillaDescuentos.getValueAt(i,0));  
                        parametro.put("SEG_CES",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("19")){    
                        parametro.put("IMP_UNIC",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("20")){    
                        parametro.put("TPRESTAMO",GrillaDescuentos.getValueAt(i,0));  
                        parametro.put("PRES_EMP",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("26")){    
                        parametro.put("SEG_CH_CONS",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("27")){    
                        parametro.put("ANTICIPO",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("31")){    
                        parametro.put("HATRASO",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("40")){    
                        parametro.put("DIAS_NO_CONTR",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("78")){    
                        parametro.put("DESCUENTOS",GrillaDescuentos.getValueAt(i,0));
                        parametro.put("MDESCUENTOS",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("79")){    
                        parametro.put("DET_PREST_CAJA",GrillaDescuentos.getValueAt(i,0));
                        parametro.put("MONT_PREST_CAJA",GrillaDescuentos.getValueAt(i,1));  
                }
                
            }
      //***************************** TOTALES ******************************************//      
            parametro.put("TSCES",jLabel5.getText());
            parametro.put("TSAT",jLabel4.getText());
            parametro.put("TSIS",jLabel6.getText());
            
            parametro.put("SCES",txCesantia.getText());
            parametro.put("SAT",txMutual.getText());
            parametro.put("SIS",txSis.getText());
            
            parametro.put("THABER",txTotalHaber.getText());
            parametro.put("TIMPONIBLE",txTotalImp.getText());
            parametro.put("TOTAL_TRIBUT",txTotalTrib.getText());
            parametro.put("TDESCUENTOS",txTotalDesc.getText());
            parametro.put("TOTAL",txTotal.getText());
      //**********************************************************************************//       
           
            parametro.put("NOMBRE2",nombrefirma);
            
            parametro.put("LOGO",getClass().getResourceAsStream("/Reportes/Logo.jpg"));                     //Ruta Logo Reporte 
            
            JasperReport reporte = (JasperReport) JRLoader.loadObject(getClass().getResource("/Reportes/rpLiquidacion.jasper")); //Ruta del Reporte
            JasperPrint jprint = JasperFillManager.fillReport(reporte, parametro,new JREmptyDataSource());
           
            JasperViewer view = new JasperViewer(jprint,false);
            view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            view.setVisible(true);
            
            
        }catch (JRException ex) {
        
            ex.printStackTrace(); 
            System.out.println ("informes r" + ex.toString ());
            Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
        
        }
       
    }
    
    private void ImprimeLiquidacion2() {
       
        try {
            
            //Connection conn = null;
            //conn = DriverManager.getConnection("jdbc:postgresql://192.168.0.150:5432/luvaly_final", "dalcaman", "goliat");
            //conn.setAutoCommit(false);
            //JasperReport reporte = null;
            //String path = "src\\Reportes\\rpLiquidacion.jasper";
          
            String dato,nombre = "";
            Map parametro = new HashMap();
            
            parametro.put("MES",cbMes.getSelectedItem());
            parametro.put("AGNO",cbAgno.getSelectedItem());
            
            parametro.put("RUT",formatearRut(txRut.getText()+Dv));
            parametro.put("NOMBRE",txNombre.getText());
            parametro.put("DEPARTAMENTO",lbDepto.getText());
            parametro.put("CARGO",lbCargo.getText());
            parametro.put("CONTRATO",lbContra.getText());                    
            parametro.put("CARGAS",lbNcargas.getText()); 
             
            parametro.put("DTRAB",txDiasT.getText());
             
            for(int i=0; i< GrillaHaberes.getRowCount();i++){
                
                dato = GrillaHaberes.getValueAt(i,2).toString();    
                
                if (dato.equals("0")){
                        parametro.put("SBASE",GrillaHaberes.getValueAt(i,1));               
                }else if(dato.equals("1")){    
                        parametro.put("GRATIF",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("2")){    
                        parametro.put("COLAC",GrillaHaberes.getValueAt(i,1));  
                }else if (dato.equals("3")){    
                        parametro.put("MOVIL",GrillaHaberes.getValueAt(i,1));      
                }else if(dato.equals("4")){    
                        parametro.put("GRATIF_VOL",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("6")){    
                        parametro.put("ASIGN_FAM",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("7")){    
                        parametro.put("VIATICOS",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("8")){    
                        parametro.put("SEM_CORR",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("9")){    
                        parametro.put("COM_GES_MIX",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("10")){    
                        parametro.put("BONO_PROD",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("75")){    
                        parametro.put("COM_GES_COBR",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("76")){    
                        parametro.put("COM_VENT",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("77")){    
                        parametro.put("CARG_FAM",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("30")){    
                        parametro.put("DIF_SUELD_ANT",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("31")){    
                        parametro.put("HORAS_ATRASO",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("32")){    
                        parametro.put("AGUINALDO",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("35")){    
                        parametro.put("DIF_PAGO_H_EXTRAS",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("36")){    
                        parametro.put("BONO_CUMP_MARGEN",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("37")){    
                        parametro.put("BONO_CUMP_PRESUP",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("38")){    
                        parametro.put("BONO_CUMP_FACT",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("39")){    
                        parametro.put("BONO_CUMP_RESULT",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("40")){    
                        parametro.put("DIAS_NO_CONTRAT",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("41")){    
                        parametro.put("H_EXTRAS",GrillaHaberes.getValueAt(i,1));  
                }else if(dato.equals("45")){    
                        parametro.put("FERIADO",GrillaHaberes.getValueAt(i,1));  
                } 
                
            }
            
            for(int i=0; i< GrillaDescuentos.getRowCount();i++){
                dato = GrillaDescuentos.getValueAt(i,2).toString(); 
                nombre = GrillaDescuentos.getValueAt(i,0).toString(); 
                
                if(dato.equals("5")){
                        parametro.put("SALUD","FONASA (7%)");
                        parametro.put("TSALUD",GrillaDescuentos.getValueAt(i,1));
                        parametro.put("SALUD2","");
                        parametro.put("TSALUD2","");
                }else if(dato.equals("17") || dato.equals("24") || dato.equals("34") ||
                        dato.equals("42") || dato.equals("43") || dato.equals("44") ){ 
                        parametro.put("SALUD",GrillaDescuentos.getValueAt(i,0));
                        parametro.put("TSALUD",GrillaDescuentos.getValueAt(i,1));
                }else if(nombre.contains("ADICIONAL")){
                        parametro.put("SALUD2",GrillaDescuentos.getValueAt(i,0));
                        parametro.put("TSALUD2",GrillaDescuentos.getValueAt(i,1));
                }else if(dato.equals("13")){  
                        parametro.put("CAFP",GrillaDescuentos.getValueAt(i,0));
                        parametro.put("AFP",GrillaDescuentos.getValueAt(i,1));
                }else if (nombre.contains("AFP")){    
                        parametro.put("AFP2",GrillaDescuentos.getValueAt(i,0));
                        parametro.put("TAFP2",GrillaDescuentos.getValueAt(i,1));
                }else if(dato.equals("25")){    
                        parametro.put("APV-A",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("33")){    
                        parametro.put("APV-B",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("14")){    
                        parametro.put("DSEG_CES",GrillaDescuentos.getValueAt(i,0));  
                        parametro.put("SEG_CES",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("19")){    
                        parametro.put("IMP_UNIC",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("20")){    
                        parametro.put("TPRESTAMO",GrillaDescuentos.getValueAt(i,0));  
                        parametro.put("PRES_EMP",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("26")){    
                        parametro.put("SEG_CH_CONS",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("27")){    
                        parametro.put("ANTICIPO",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("31")){    
                        parametro.put("HATRASO",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("40")){    
                        parametro.put("DIAS_NO_CONTR",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("78")){    
                        parametro.put("DESCUENTOS",GrillaDescuentos.getValueAt(i,0));
                        parametro.put("MDESCUENTOS",GrillaDescuentos.getValueAt(i,1));  
                }else if(dato.equals("74")){    
                       parametro.put("CTA_AHORRO",GrillaDescuentos.getValueAt(i,1));  
                }
                
                
            }
            
            parametro.put("TSCES",jLabel5.getText());
            parametro.put("TSAT",jLabel4.getText());
            parametro.put("TSIS",jLabel6.getText());
            
            parametro.put("SCES",txCesantia.getText());
            parametro.put("SAT",txMutual.getText());
            parametro.put("SIS",txSis.getText());
            
            parametro.put("THABER",txTotalHaber.getText());
            parametro.put("TIMPONIBLE",txTotalImp.getText());
            parametro.put("TOTAL_TRIBUT",txTotalTrib.getText());
            parametro.put("TDESCUENTOS",txTotalDesc.getText());
            parametro.put("TOTAL",txTotal.getText());
            
            parametro.put("NOMBRE2",nombrefirma);
            
            
            parametro.put("LOGO",getClass().getResourceAsStream("/Reportes/logoEcona.png"));                //Ruta Logo Reporte 
            
            JasperReport reporte = (JasperReport) JRLoader.loadObject(getClass().getResource("/Reportes/rpLiquidacion2.jasper")); //Ruta del Reporte
            JasperPrint jprint = JasperFillManager.fillReport(reporte, parametro,new JREmptyDataSource());
           
            JasperViewer view = new JasperViewer(jprint,false);
            view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            view.setVisible(true);
            
            
        }catch (JRException ex) {
        
            ex.printStackTrace(); 
            System.out.println ("informes r" + ex.toString ());
            Logger.getLogger(pfGastosSueldos.class.getName()).log(Level.SEVERE, null, ex);
        
        }
       
    }
    
   
    static public String formatearRut(String rut){
        int cont=0;
        String format;
        if(rut.length() == 0){
            
          return ""; 
        
        }else{
            
            rut = rut.replace(".", "");
            rut = rut.replace("-", "");
            format = "-"+rut.substring(rut.length()-1);
            
            for(int i = rut.length()-2;i>=0;i--){
                
                format = rut.substring(i, i+1)+format;
                cont++;
                
                if(cont == 3 && i != 0){
                    format = "."+format;
                    cont = 0;
                }
            }
            return format;
        }
    }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable GrillaDescuentos;
    private javax.swing.JTable GrillaHaberes;
    private javax.swing.JButton btAgregar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btConsolidado;
    private javax.swing.JButton btEditar;
    private javax.swing.JButton btEliminaDescuento;
    private javax.swing.JButton btEliminaHaber;
    private javax.swing.JButton btGuardar;
    private javax.swing.JButton btImprimir;
    private javax.swing.JButton btIr;
    private javax.swing.JButton btLimpiar;
    private javax.swing.JButton btModifica;
    private javax.swing.JButton btNuevo;
    private javax.swing.JComboBox<String> cbAgno;
    private javax.swing.JComboBox<String> cbDetalle;
    private javax.swing.JComboBox<String> cbDetalleId;
    private javax.swing.JComboBox<String> cbMes;
    private javax.swing.JComboBox<String> cbTipo;
    private javax.swing.JLabel csemana;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbCargo;
    private javax.swing.JLabel lbContra;
    private javax.swing.JLabel lbDepto;
    private javax.swing.JLabel lbEstado;
    private javax.swing.JLabel lbNcargas;
    private javax.swing.JLabel lbTramo;
    private javax.swing.JPanel pnMenu;
    public javax.swing.JTextField txCesantia;
    private javax.swing.JTextField txDiaf;
    private javax.swing.JTextField txDiah;
    private javax.swing.JTextField txDiasT;
    private javax.swing.JTextField txFeriados;
    private javax.swing.JTextField txInasistencia;
    private javax.swing.JTextField txLicencia;
    private javax.swing.JTextField txMonto;
    public javax.swing.JTextField txMutual;
    private javax.swing.JTextField txNombre;
    private javax.swing.JTextField txRut;
    public javax.swing.JTextField txSis;
    private javax.swing.JTextField txTopeImp;
    private javax.swing.JTextField txTopeImpCes;
    public javax.swing.JTextField txTotal;
    private javax.swing.JTextField txTotalDesc;
    private javax.swing.JTextField txTotalHaber;
    private javax.swing.JTextField txTotalImp;
    private javax.swing.JTextField txTotalTrib;
    // End of variables declaration//GEN-END:variables
}
